using System;
using System.Data.OleDb;
using System.IO;
using System.Windows.Forms;
using combit.ListLabel24;
using combit.ListLabel24.DataProviders;
using Microsoft.Win32;
using MetroFramework.Forms; 

namespace Export
{
    public partial class Form1 : MetroForm
    {
        private string _databasePath;
        private string _startPath;
        private string _fileFilter = "PDF Files|*.PDF";
        private LlExportTarget _exporterTarget = LlExportTarget.Pdf;
        private CheckBox _showFileCheck;
        private string _exportBase = "export.pdf";

        private string FileName
        {
            get { return fileNameTb.Text; }
            set { fileNameTb.Text = value; }
        }

        public Form1()
        {
            InitializeComponent();

            RegistryKey installKey = Registry.CurrentUser.CreateSubKey(@"Software\combit\cmbtll");
            if (installKey != null)
            {
                _databasePath = (string)installKey.GetValue("NWINDPath", string.Empty);
            }

            if (String.IsNullOrEmpty(_databasePath))
                MessageBox.Show("Unable to find sample database. Make sure List & Label is installed correctly.", "List & Label");

            // Change Directory
            Directory.SetCurrentDirectory(@"..\..\..\");
            _startPath = Directory.GetCurrentDirectory();

            FileName = Path.Combine(_startPath, _exportBase);
            formatCb.SelectedIndex = 0;
        }

        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.Run(new Form1());
        }

        // Init Data Reader to access nwind.mdb
        private OleDbCommand CreateOleDbCommand()
        {
            OleDbConnection conn = new OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + _databasePath);
            conn.Open();
            OleDbCommand cmd = new OleDbCommand("SELECT * FROM Products INNER JOIN Categories ON (Products.CategoryID = Categories.CategoryID)", conn);
            conn.Close();
            return cmd;
        }


        private void CreateButton_Click(object sender, System.EventArgs e)
        {
            try
            {
                OleDbCommand cmd = CreateOleDbCommand();

                DbCommandSetDataProvider provider = new DbCommandSetDataProvider();
                provider.AddCommand(cmd, "Products", "[{0}]", "?");
				provider.MinimalSelect = false;
                LL.SetDataBinding(provider, "Products");

                // create export configuration
                ExportConfiguration exportConfiguration = new ExportConfiguration(_exporterTarget, fileNameTb.Text, "simple.lst");
                exportConfiguration.ShowResult = _showFileCheck.Checked;

                /*To additonally send the result as eMail, you'd need the following code lines. This
                will send an email to llmailtest@combit.net. Set the export format to HTML, as this sample
                will send the result as HTML body of the mail. You need to set a valid SMTP server
                using the LlExportOption.ExportMailSmtp... options. */

                /*
                LL.ExportOptions.Clear();
                LL.ExportOptions.Add(LlExportOption.ExportSendAsMail, "1");
                LL.ExportOptions.Add(LlExportOption.ExportMailTo, "combit GmbH <SMTP:llmailtest@combit.net>");
                LL.ExportOptions.Add(LlExportOption.ExportMailSubject, "combit List & Label mail test");
                LL.ExportOptions.Add(LlExportOption.ExportMailShowDialog, "1");
                LL.ExportOptions.Add(LlExportOption.ExportMailSendResultAs, "text/html");
                */

                // Start export
                LL.Export(exportConfiguration);
            }
            catch (ListLabelException LlException)
            {
                // Catch Exceptions
                MessageBox.Show("Information: " + LlException.Message + "\n\nThis information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void FormatCombo_SelectedValueChanged(object sender, System.EventArgs e)
        {
            switch (formatCb.SelectedIndex)
            {
                case 0:
                    {
                        _fileFilter = "PDF Files|*.PDF";
                        _exporterTarget = LlExportTarget.Pdf;
                        _exportBase = Path.GetFileNameWithoutExtension(fileNameTb.Text) + ".pdf";
                        break;
                    }

                case 1:
                    {
                        _fileFilter = "MHTML Files|*.mht";
                        _exporterTarget = LlExportTarget.Mhtml;
                        _exportBase = Path.GetFileNameWithoutExtension(fileNameTb.Text) + ".mht";
                        break;
                    }

                case 2:
                    {
                        _fileFilter = "HTML Files|*.HTM";
                        _exporterTarget = LlExportTarget.Html;
                        _exportBase = Path.GetFileNameWithoutExtension(fileNameTb.Text) + ".htm";
                        break;
                    }

                case 3:
                    {
                        _fileFilter = "RTF Files|*.RTF";
                        _exporterTarget = LlExportTarget.Rtf;
                        _exportBase = Path.GetFileNameWithoutExtension(fileNameTb.Text) + ".rtf";
                        break;
                    }

                case 4:
                    {
                        _fileFilter = "XML Files|*.XML";
                        _exporterTarget = LlExportTarget.Xml;
                        _exportBase = Path.GetFileNameWithoutExtension(fileNameTb.Text) + ".xml";
                        break;
                    }

                case 5:
                    {
                        _fileFilter = "Tiff Files|*.TIF";
                        _exporterTarget = LlExportTarget.MultiTiff;
                        _exportBase = Path.GetFileNameWithoutExtension(fileNameTb.Text) + ".tif";
                        break;
                    }

                case 6:
                    {
                        _fileFilter = "Text Files|*.TXT";
                        _exporterTarget = LlExportTarget.Text;
                        _exportBase = Path.GetFileNameWithoutExtension(fileNameTb.Text) + ".txt";
                        break;
                    }

                case 7:
                    {
                        _fileFilter = "Excel Files|*.XLS";
                        _exporterTarget = LlExportTarget.Xls;
                        _exportBase = Path.GetFileNameWithoutExtension(fileNameTb.Text) + ".xls";
                        break;
                    }
                case 8:
                    {
                        _fileFilter = "Excel Files|*.XLSX";
                        _exporterTarget = LlExportTarget.Xlsx;
                        _exportBase = Path.GetFileNameWithoutExtension(fileNameTb.Text) + ".xlsx";
                        break;
                    }
                case 9:
                    {
                        _fileFilter = "HTML Files|*.HTM";
                        _exporterTarget = LlExportTarget.Xhtml;
                        _exportBase = Path.GetFileNameWithoutExtension(fileNameTb.Text) + ".htm";
                        break;
                    }
                case 10:
                    {
                        _fileFilter = "Preview Files|*.LL";
                        _exporterTarget = LlExportTarget.Preview;
                        _exportBase = Path.GetFileNameWithoutExtension(fileNameTb.Text) + ".ll";
                        break;
                    }
                case 11:
                    {
                        _fileFilter = "Word Files|*.DOCX";
                        _exporterTarget = LlExportTarget.Docx;
                        _exportBase = Path.GetFileNameWithoutExtension(fileNameTb.Text) + ".docx";
                        break;
                    }

            }
            FileName = Path.GetDirectoryName(fileNameTb.Text) + @"\" + _exportBase;
        }

        private void SelectButton_Click(object sender, System.EventArgs e)
        {
            saveFileDialog.Filter = _fileFilter;
            saveFileDialog.FileName = FileName;
            if (saveFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                FileName = saveFileDialog.FileName;
            Directory.SetCurrentDirectory(_startPath);
        }
    }
}

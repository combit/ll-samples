using System;
using System.Data;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using System.Data.OleDb;
using combit.Reporting;
using combit.Reporting.Dom;
using Microsoft.Win32;
using System.Collections.Generic;

namespace DOMAdvanced
{
    public partial class Form1 : Form
    {
        private DataSet _dataSet;
        private Font _llFont;

        public Form1()
        {
            Directory.SetCurrentDirectory(@"..\..\..\..\..\..\..\Report Files");
            InitializeComponent();

            InitDataSet();
        }

        private void Form1_Load(object sender, System.EventArgs e)
        {
            pictureBox1.Image = System.Drawing.SystemIcons.Information.ToBitmap();
            cmbSortCell.SelectedIndex = 0;
            cmbSortRow.SelectedIndex = 0;
            cmbPageFormat.SelectedIndex = 1;

            _llFont = new Font(Font.FontFamily, 10, FontStyle.Regular);
        }

        private void PrintProject_Click(object sender, EventArgs e)
        {
            try
            {
                //D: An das DataSet Objekt binden
                //US: Now bind to the DataSet
                LL.SetDataBinding(_dataSet, string.Empty);

                //D: Die master Daten sollen als Felder angemeldet werden
                //US: we want to have the master data as fields
                LL.AutoMasterMode = LlAutoMasterMode.AsFields;

                //D: List & Label Projekt anhand Einstellungen erstellen
                //US: Create List & Label project based on the settings
                GenerateLLProject();

                //D: Drucken
                //US: Print
                LL.Print(LlProject.List, Path.Combine(Application.StartupPath, "dynamic.lst"));
            }
            catch (ListLabelException LlException)
            {
                //D: Exception abfangen
                //US: Catch Exceptions
                MessageBox.Show("Information: " + LlException.Message + "\n\nThis information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void DesignProject_Click(object sender, EventArgs e)
        {
            try
            {
                //D: An das DataSet Objekt binden
                //US: Now bind to the DataSet
                LL.SetDataBinding(_dataSet, string.Empty);

                //D: Die master Daten sollen als Felder angemeldet werden
                //US: we want to have the master data as fields
                LL.AutoMasterMode = LlAutoMasterMode.AsFields;

                //D: List & Label Projekt anhand Einstellungen erstellen
                //US: Create List & Label project based on the settings
                GenerateLLProject();

                //D: Designer aufrufen
                //US: Call the designer
                LL.Design(LlProject.List, Path.Combine(Application.StartupPath, "dynamic.lst"));
            }
            catch (ListLabelException LlException)
            {
                //D: Exception abfangen
                //US: Catch Exceptions
                MessageBox.Show("Information: " + LlException.Message + "\n\nThis information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        //D: Hinweis: Beim Verwenden der List & Label DOM Klassen ist zu beachten, dass die einzelnen Werte als Zeichenkette angegeben werden müssen.
        //	   Dies ist notwendig um ein Höchstmaß an Flexibilität zu gewährleisten, da somit auch List & Label Formeln erlaubt sind.

        //US: Hint: When using List & Label DOM classes please notice, that the values have to be indicated as strings. This is necessary to ensure a
        //		 maximum of flexibility, as therefore List & Label formulas are allowed.
        private void GenerateLLProject()
        {
            Cursor cursor = Cursors.WaitCursor;

            try
            {
                //D: Neues DOM-Projekt vom Typen LlProject.List erzeugen
                //US: Create new DOM project, type LlProject.List
                using (ProjectList proj = new ProjectList(LL))
                {
                    //D: Dateinamen und Dateizugriffsoptionen setzen
                    //US: Set file name and file access options
                    proj.Open(Path.Combine(Application.StartupPath, "dynamic.lst"), LlDomFileMode.Create, LlDomAccessMode.ReadWrite);

                    //D: Designschema setzen
                    //US: Set design scheme
                    proj.ProjectParameters["LL.DesignScheme"].Contents = "\"COMBITCOLORWHEEL\"";

                    //D: Mit dieser Eigenschaft kann die Seitenausrichtung bestimmt werden
                    //US: With this property you can set the page orientation
                    proj.Regions[0].Paper.Orientation = (cmbPageFormat.SelectedIndex + 1).ToString();

                    //D: Dem Projekt eine neue Projektbeschreibung zuweisen
                    //US: Assign new project description to the project
                    proj.ProjectParameters["LL.ProjectDescription"].Contents = "Dynamically created project";

                    //D: Ein leeres Text Objekt erstellen
                    //US: Create an empty text object
                    ObjectText llobjText = new ObjectText(proj.Objects);

                    //D: Auslesen der Seitenkoordinaten der ersten Seite
                    //US: Get the coordinates for the first page
                    Size pageExtend = proj.Regions[0].Paper.Extent.Get();

                    //D: Setzen von Eigenschaften für das Textobjekt
                    //US: Set some properties for the text object
                    llobjText.Position.Set(10000, 10000, pageExtend.Width - 65000, 27000);
                    llobjText.LayerId = 1;

                    //D: Hinzufügen eines Paragraphen und setzen diverser Eigenschaften
                    //US: Add a paragraph to the text object and set some properties
                    Paragraph llobjParagraph = new Paragraph(llobjText.Paragraphs);
                    llobjParagraph.Contents = string.Format("\"{0}\"", textProjectTitle.Text);

                    //D: Ändern der Standard Schriftart im Projekt
                    //US: Change the default font for the project
                    proj.Settings.DefaultFont.SetFont(_llFont);
                    int color = (label38.ForeColor.B << 16) | (label38.ForeColor.G << 8) | label38.ForeColor.R;
                    proj.Settings.DefaultFont.Color = color.ToString();

                    //D: Hinzufügen eines Grafikobjekts
                    //US: Add a drawing object
                    ObjectDrawing llobjPic = new ObjectDrawing(proj.Objects);
                    llobjPic.Source.FileInfo.FileName = @"..\..\..\sunshine.gif";
                    llobjPic.Position.Set(pageExtend.Width - 50000, 10000, pageExtend.Width - (pageExtend.Width - 40000), 27000);
                    llobjPic.LayerId = 1;

                    //D: Hinzufügen eines Tabellencontainers und setzen diverser Eigenschaften
                    //US: Add a table container and set some properties
                    ObjectReportContainer container = new ObjectReportContainer(proj.Objects);
                    container.Position.Set(10000, 40000, pageExtend.Width - 20000, pageExtend.Height - 44000);

                    if (optModeCustomer.Checked || optModeTimePeriod.Checked)
                    {
                        //D: In dem Container eine Kreuztabelle hinzufügen. 
                        //US: Add a crosstab into the container. 
                        SubItemCrosstab crosstab = new SubItemCrosstab(container.SubItems);

                        //D: Die Tabelle festlegen, aus der die Daten stammen sollen. Als Datenquelle wird die Tabelle "Order_Details" verwendet.
                        //US: Define the source table. We use the "Order_Details" table as data source.
                        crosstab.SourceTablePath = "Customers;Orders(Customers2Orders);Order_Details(Orders2Order Details)";

                        if (optModeCustomer.Checked)
                        {
                            //D: Hier lassen sich die Daten festlegen, welche für die Zeilen verwendet werden sollen
                            //US: Define the data which should be used for the rows
                            crosstab.Definition.Rows.Groupings.Add("Customers.Country");

                            //D: Hier lassen sich die Daten festlegen, welche für die Spalten verwendet werden sollen
                            //US: Define the data which should be used for the columns
                            crosstab.Definition.Columns.Groupings.Add("Orders.EmployeeID@Employees.EmployeeID:LastName");

                            //D: Die Überschrift der äussersten Spalten / Zeilen kann hier angegeben werden
                            //US: Define the outside cell / row title with the following line
                            crosstab.Definition.Rows.GroupLabel[1].Formula = "\"Countries\"";
                            crosstab.Definition.Rows.GroupLabel[1].Font.Color = "LL.Color.White";
                            crosstab.Definition.Rows.GroupLabel[1].Font.Size = "12";
                            crosstab.Definition.Rows.GroupLabel[1].Font.Bold = "True";
                            crosstab.Definition.Rows.GroupLabel[1].Direction = "90";

                            crosstab.Definition.Columns.GroupLabel[1].Formula = "\"Employees\"";
                            crosstab.Definition.Columns.GroupLabel[1].Font.Color = "LL.Color.White";
                            crosstab.Definition.Columns.GroupLabel[1].Font.Size = "12";
                            crosstab.Definition.Columns.GroupLabel[1].Font.Bold = "True";

                            //D: Text und Wert, welcher in allen Zellen angezeigt werden soll
                            //US: Text and value which should be used for all cells
                            crosstab.Definition.Cells.All.Formula = "Sum (Order_Details.Quantity * Order_Details.UnitPrice)";
                            crosstab.Definition.Cells.All.Value = "Sum (Order_Details.Quantity * Order_Details.UnitPrice)";

                            //D: Formatierung für die Zellen festlegen (Währungsformat)
                            //US: Apply currency formatter to the cells
                            PropertyOutputFormatterCurrency curr = new PropertyOutputFormatterCurrency(crosstab.Definition.Cells.All.OutputFormatter);
                        }
                        else if (optModeTimePeriod.Checked)
                        {
                            //D: Hier lassen sich die Daten festlegen, welche für die Zeilen verwendet werden sollen
                            //US: Define the data which should be used for the rows
                            crosstab.Definition.Rows.Groupings.Add("Customers.ContactName");

                            //D: Hier lassen sich die Daten festlegen, welche für die Spalten verwendet werden sollen
                            //US: Define the data which should be used for the columns
                            crosstab.Definition.Columns.Groupings.Add("Year (Orders.OrderDate)");
                            crosstab.Definition.Columns.Groupings.Add("Month (Orders.OrderDate)");

                            //D: Die Überschrift der Spalten kann hier angegeben werden
                            //US: Define the cell title with the following line
                            crosstab.Definition.Columns.GroupLabel[1].Formula = "Year$ (Orders.OrderDate)";
                            crosstab.Definition.Columns.GroupLabel[1].Font.Color = "LL.Color.White";
                            crosstab.Definition.Columns.GroupLabel[1].Font.Bold = "True";

                            crosstab.Definition.Columns.GroupLabel[0].Formula = "Month$ (Orders.OrderDate)";

                            crosstab.Definition.Columns.SumLabel[2].Font.Color = "LL.Color.White";
                            crosstab.Definition.Columns.SumLabel[2].Font.Bold = "True";

                            //D: Die Überschrift der äussersten Spalten / Zeilen kann hier angegeben werden
                            //US: Define the outside cell / row title with the following line
                            crosstab.Definition.Columns.GroupLabel[2].Formula = "\"Order Date\"";
                            crosstab.Definition.Columns.GroupLabel[2].Font.Color = "LL.Color.White";
                            crosstab.Definition.Columns.GroupLabel[2].Font.Size = "12";
                            crosstab.Definition.Columns.GroupLabel[2].Font.Bold = "True";

                            crosstab.Definition.Rows.GroupLabel[1].Formula = "\"Customers\"";
                            crosstab.Definition.Rows.GroupLabel[1].Font.Color = "LL.Color.White";
                            crosstab.Definition.Rows.GroupLabel[1].Font.Size = "12";
                            crosstab.Definition.Rows.GroupLabel[1].Font.Bold = "True";
                            crosstab.Definition.Rows.GroupLabel[1].Direction = "90";

                            //D: Text und Wert, welcher in allen Zellen angezeigt werden soll
                            //US: Text and value, which should be used for all cells
                            crosstab.Definition.Cells.All.Formula = "Sum (Order_Details.Quantity * Order_Details.UnitPrice)";
                            crosstab.Definition.Cells.All.Value = "Sum (Order_Details.Quantity * Order_Details.UnitPrice)";

                            // D: Spaltenüberschriften auf Folgeseiten wiederholen
                            // US: Repeat column labels on following pages
                            crosstab.Definition.RowWrapping.RepeatLabels = "True";
                        }

                        //D: Diverse Einstellungen für die Farbgebung der Zeilen setzen
                        //US: Define properties for the row color schema
                        crosstab.Definition.Rows.GroupLabel[0].Filling.Style = "1";
                        crosstab.Definition.Rows.GroupLabel[0].Filling.Color = string.Format("RGB ({0}, {1}, {2})", label25.BackColor.R, label25.BackColor.G, label25.BackColor.B);
                        crosstab.Definition.Rows.GroupLabel[0].Font.Color = "LL.Color.White";
                        crosstab.Definition.Rows.GroupLabel[0].Font.Bold = "True";

                        crosstab.Definition.Rows.SumLabel[1].Filling.Style = "1";
                        crosstab.Definition.Rows.SumLabel[1].Filling.Color = string.Format("RGB ({0}, {1}, {2})", label25.BackColor.R, label25.BackColor.G, label25.BackColor.B);
                        crosstab.Definition.Rows.SumLabel[1].Font.Color = "LL.Color.White";
                        crosstab.Definition.Rows.SumLabel[1].Font.Bold = "True";

                        //D: Festlegen, ob die Zeilen aufsteigend oder absteigend sortiert werden sollen
                        //US: Define whether the rows should be sorted ascending or descending
                        (crosstab.Definition.Rows.GroupLabel[0] as CrosstabCellGroupLabel).SortOrderAscending.SortOrder = cmbSortRow.SelectedIndex == 0 ? "0" : "1";

                        //D: Diverse Einstellungen für die Farbgebung der Spalten setzen
                        //US: Define properties for the column color schema
                        crosstab.Definition.Columns.GroupLabel[0].Filling.Style = "1";
                        crosstab.Definition.Columns.GroupLabel[0].Filling.Color = string.Format("RGB ({0}, {1}, {2})", label40.BackColor.R, label40.BackColor.G, label40.BackColor.B);
                        crosstab.Definition.Columns.GroupLabel[0].Font.Color = "LL.Color.White";
                        crosstab.Definition.Columns.GroupLabel[0].Font.Bold = "True";

                        crosstab.Definition.Columns.SumLabel[1].Filling.Style = "1";
                        crosstab.Definition.Columns.SumLabel[1].Filling.Color = string.Format("RGB ({0}, {1}, {2})", label40.BackColor.R, label40.BackColor.G, label40.BackColor.B);
                        crosstab.Definition.Columns.SumLabel[1].Font.Color = "LL.Color.White";
                        crosstab.Definition.Columns.SumLabel[1].Font.Bold = "True";

                        //D: Festlegen, ob die Spalten aufsteigend oder absteigend sortiert werden sollen
                        //US: Define whether the columns should be sorted ascending or descending
                        (crosstab.Definition.Columns.GroupLabel[0] as CrosstabCellGroupLabel).SortOrderAscending.SortOrder = cmbSortCell.SelectedIndex == 0 ? "0" : "1";
                    }
                    else if (optModeChart.Checked)
                    {
                        //**** D: Erstellen eines Kreisdiagramms ****
                        //**** US: Create a pie-chart ****

                        //D: In dem Container ein Chart-Objekt hinzufügen und dessen Namen vergeben. 
                        //US: Add a chart into the container and define its name. 
                        SubItemChart chart = new SubItemChart(LlChartType.Pie2D, container.SubItems);
                        chart.Name = Enum.GetName(typeof(LlChartType), LlChartType.Pie2D);

                        //D: Die Tabelle festlegen, aus der die Daten stammen sollen. Als Datenquelle wird die Tabelle "Order_Details" verwendet.
                        //US: Define the source table. We use the "Order_Details" table as data source.
                        chart.SourceTablePath = "Employees;Orders(Employees2Orders);Order_Details(Orders2Order Details)";

                        //D: Um Zugriff auf die Chart-Engine zu bekommen, muss diese zunächst in den passenden Typ konvertiert werden
                        //US: To access the chart-engine, it is necessary to convert it in the suitable type at first
                        PropertyChartEnginePie2D engine = (PropertyChartEnginePie2D)chart.Definition.ChartEngine;

                        //D: In den folgenden Zeilen wird die Datenquelle angegeben
                        //US: In the following lines, the data source is defined
                        engine.XAxis.Value = "Employees.LastName + \", \" + Employees.FirstName";
                        engine.YAxis.Value = "Order_Details.UnitPrice*Order_Details.Quantity";
                        engine.YAxis.CoordinateLabelOnObject.Placement = "1";
                        engine.YAxis.CoordinateLabelOnObject.Contents = "LL.ChartObject.ArcValue";

                        //D: Die Überschrift des Charts kann hier angegeben werden
                        //US: Define the chart title with the following line
                        chart.Definition.Title.Contents = "\"" + textBox3.Text + "\"";
                        chart.Definition.Title.Font.Color = "LL.Color.Black";
                        chart.Definition.Title.Font.Bold = "True";
                        chart.Definition.Title.Font.Size = "14";

                        //D: Formatierung für die Legende
                        //US: Define the legend format
                        PropertyOutputFormatterCurrency curr = new PropertyOutputFormatterCurrency(engine.YAxis.CoordinateLabelOnObject.OutputFormatter);

                        //D: Eine Anzahl von zwei Nachkommastellen 
                        //US: A number of two decimal places
                        curr.CountOfDecimals = "2";

                        //D: Hintergrundfarbe des Charts ausschalten
                        //US: Deactivate chart background color
                        chart.Definition.Background.Visible = "False";

                        //**** D: Erstellen eines Balkendiagramms ****
                        //**** US: Create a bar-chart ****

                        //D: In dem Container ein Chart-Objekt hinzufügen und dessen Namen vergeben. 
                        //US: Add a chart into the container and define its name. 
                        SubItemChart chartBar = new SubItemChart(LlChartType.Bar2D, container.SubItems);
                        chartBar.Name = Enum.GetName(typeof(LlChartType), LlChartType.Bar2D);

                        //D: Die Tabelle festlegen, aus der die Daten stammen sollen. Als Datenquelle wird die Tabelle "Order_Details" verwendet.
                        //US: Define the source table. We use the "Order_Details" table as data source.
                        chartBar.SourceTablePath = "Employees;Orders(Employees2Orders);Order_Details(Orders2Order Details)";

                        //D: Um Zugriff auf die Chart-Engine zu bekommen, muss diese zunächst in den passenden Typ konvertiert werden
                        //US: To access the chart-engine, it is necessary to convert it in the suitable type at first
                        PropertyChartEngineBar2D engineBar = (PropertyChartEngineBar2D)chartBar.Definition.ChartEngine;

                        //D: In den folgenden Zeilen wird die Datenquelle angegeben
                        //US: In the following lines, the data source is defined
                        engineBar.XAxis.Value = "Employees.LastName + \", \" + Employees.FirstName";
                        engineBar.YAxes[0].Value = "Order_Details.UnitPrice*Order_Details.Quantity";
                        engineBar.YAxes[0].CoordinateLabelOnObject.Placement = "1";

                        //D: Die Überschrift des Charts kann hier angegeben werden
                        //US: Define the chart title with the following line
                        chartBar.Definition.Title.Contents = "\"" + textBox3.Text + "\"";
                        chartBar.Definition.Title.Font.Color = "LL.Color.Black";
                        chartBar.Definition.Title.Font.Bold = "True";
                        chartBar.Definition.Title.Font.Size = "14";

                        //D: Formatierung für die Legende
                        //US: Define the legend format
                        PropertyOutputFormatterCurrency currBar = new PropertyOutputFormatterCurrency(engineBar.YAxes[0].CoordinateLabelOnObject.OutputFormatter);

                        //D: Eine Anzahl von zwei Nachkommastellen 
                        //US: A number of two decimal places
                        currBar.CountOfDecimals = "2";

                        //D: Hintergrundfarbe des Charts ausschalten
                        //US: Deactivate chart background color
                        chartBar.Definition.Background.Visible = "False";
                    }

                    //D: Hinzufügen eines Hilfs-Rechtecks. Wird verwendet um den Tabellencontainer auf der ersten Seite unterhalb der Überschrift anzuzeigen
                    //US: Add a helper rectangle. This will be used for showing the tablecontainer at the first page under the title
                    ObjectRectangle llobjHelper = new ObjectRectangle(proj.Objects);

                    //D: Setzen von Eigenschaften für das Rechteck
                    //US: Set some properties for the rectangle
                    llobjHelper.Position.Set(10000, 10000, 1, 30000);
                    llobjHelper.LayerId = 1;
                    llobjHelper.Frame.Color = "RGB(255, 255, 255)";

                    //D: Den Berichtscontainer mit dem Rechteck Objekt verketten, so dass der Container auf den Folgeseiten mehr Platz einnimmt
                    //US: Link the report container to the rectangle object in order to fill up space on following pages
                    container.LinkTo(llobjHelper, LlDomVerticalLinkType.RelativeToEnd, LlDomVerticalSizeAdaptionType.Inverse);

                    //D: Projekt als Datei speichern
                    //US: Save project to file
                    proj.Save();
                }
            }
            catch (ListLabelException LlException)
            {
                //D: Exception abfangen
                //US: Catch Exceptions
                MessageBox.Show("Information: " + LlException.Message + "\n\nThis information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                cursor = Cursors.Default;
            }
        }

        // Init Data Set to access nwind.mdb
        private void InitDataSet()
        {
            RegistryKey installKey = Registry.CurrentUser.CreateSubKey(@"Software\combit\cmbtll");

            string databasePath = String.Empty;
            if (installKey != null)
            {
                databasePath = (string)installKey.GetValue("NWINDPath", "");
            }

            if (databasePath.Length == 0)
                MessageBox.Show("Unable to find sample database. Make sure List & Label is installed correctly.", "List & Label");

            _dataSet = new DataSet();
            string connectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + databasePath;
            OleDbConnection myOledbConnection = new OleDbConnection(connectionString);
            myOledbConnection.Open();

            DataTable table = myOledbConnection.GetSchema("Tables");

            //D: Durch alle Tabellen iterieren und in das DataSet aufnehmen
            //US: Iterate all tabels and add them to the DataSet
            foreach (DataRow dr in table.Rows)
            {
                if (dr["TABLE_TYPE"].ToString() == "TABLE")
                {
                    string tableName = dr["Table_Name"].ToString();
                    OleDbDataAdapter dataAdapter;

                    //D: Die "Orders" und "Order Details" Tabelle einschränken.
                    //US: Limit the "Order" an "Order Details" table. 
                    if (tableName == "Orders" || tableName == "Order Details")
                        dataAdapter = new OleDbDataAdapter(new OleDbCommand("SELECT * FROM [" + tableName + "] WHERE OrderID > 10850", myOledbConnection));
                    else
                        dataAdapter = new OleDbDataAdapter(new OleDbCommand("SELECT * FROM [" + tableName + "]", myOledbConnection));


                    dataAdapter.FillSchema(_dataSet, SchemaType.Source, tableName);
                    dataAdapter.Fill(_dataSet, tableName);
                }
            }


            List<string> childTables = new List<string>() { "Products", "Orders", "Orders", "Order Details", "Order Details", "Orders", "Products" };
            List<string> childCols = new List<string>() { "CategoryID", "CustomerID", "EmployeeID", "OrderID", "ProductID", "ShipVia", "SupplierID" };
            List<string> parentTables = new List<string>() { "Categories", "Customers", "Employees", "Orders", "Products", "Shippers", "Suppliers" };
            List<string> parentCols = new List<string>() { "CategoryID", "CustomerID", "EmployeeID", "OrderID", "ProductID", "ShipperID", "SupplierID" };
            List<string> relationNames = new List<string>() { "Categories2Products", "Customers2Orders", "Employees2Orders", "Orders2Order Details", "Products2Order Details", "Shippers2Orders", "Suppliers2Products" };

            //D: Relationen auslesen
            //US: Get relations
            for (int i = 0; i < relationNames.Count; i++)
            {
                _dataSet.Relations.Add(new DataRelation(relationNames[i], _dataSet.Tables[parentTables[i]].Columns[parentCols[i]], _dataSet.Tables[childTables[i]].Columns[childCols[i]]));
            }

            //D: Verbindung schliessen
            //US: Close connection
            myOledbConnection.Close();
        }

        private void Button1_Click(object sender, EventArgs e)
        {
            SetLabelBackColor(label40);
        }

        private void Button9_Click(object sender, EventArgs e)
        {
            SetLabelBackColor(label25);
        }

        private void SetLabelBackColor(Label label)
        {
            ColorDialog dlg = new ColorDialog();
            dlg.Color = label.BackColor;

            if (dlg.ShowDialog() == DialogResult.OK)
                label.BackColor = dlg.Color;
        }

        private void OptModeTimePeriod_Click(object sender, EventArgs e)
        {
            if (optModeCustomer.Checked)
            {
                label31.Enabled = textBox3.Enabled = false;
                label_Schema.Text = label8.Text;
            }
            else if (optModeTimePeriod.Checked)
            {
                label31.Enabled = textBox3.Enabled = false;
                label_Schema.Text = label9.Text;
            }
            else if (optModeChart.Checked)
            {
                label31.Enabled = textBox3.Enabled = true;
                label_Schema.Text = label9.Text;
            }
        }

        private void UpdateInfo()
        {
            if (optModeCustomer.Checked)
            {
                label_Schema.Text = label8.Text;
            }
            else if (optModeTimePeriod.Checked)
            {
                label_Schema.Text = label9.Text;
            }
            else if (optModeChart.Checked)
            {
                label_Schema.Text = label32.Text;
                label_Title.Text = textBox3.Text;
            }

            label_Cell.Text = string.Format("RGB ({0}, {1}, {2})",
                label40.BackColor.R,
                label40.BackColor.G,
                label40.BackColor.B,
                cmbSortCell.Text);

            label_Row.Text = string.Format("RGB ({0}, {1}, {2})",
                label25.BackColor.R,
                label25.BackColor.G,
                label25.BackColor.B,
                cmbSortRow.Text);

            label_ProjectTitle.Text = textProjectTitle.Text;
            label_DefFont.Text = _llFont.FontFamily.Name + ", " + _llFont.Size.ToString();

        }

        private void TabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            UpdateInfo();
        }

        private void Button6_Click(object sender, EventArgs e)
        {
            ColorDialog dlg = new ColorDialog();
            dlg.Color = label38.ForeColor;

            if (dlg.ShowDialog() == DialogResult.OK)
            {
                label38.ForeColor = dlg.Color;
            }
        }

        private void Button5_Click(object sender, EventArgs e)
        {
            fontDialog1.Font = _llFont;
            if (fontDialog1.ShowDialog() == DialogResult.OK)
            {
                _llFont = fontDialog1.Font;
                label38.Font = _llFont;
            }
        }

        private void BtnNavigate_Click(object sender, EventArgs e)
        {
            if (sender == btnPrev2)
                tabControl1.SelectedTab = tabPage1;

            if (sender == btnNext1 | sender == btnPrev3)
                tabControl1.SelectedTab = tabPage2;

            if (sender == btnNext2)
                tabControl1.SelectedTab = tabPage3;

            if (sender == btnNext3)
                tabControl1.SelectedTab = tabPage4;

            //label1.Focus(); 
        }
    }
}

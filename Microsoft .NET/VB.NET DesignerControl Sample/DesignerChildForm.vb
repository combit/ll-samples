Imports System.Data
Imports System.Data.OleDb
Imports System.IO
Imports System.Windows.Forms
Imports combit.ListLabel24
Imports Microsoft.Win32
Imports MetroFramework.Forms

Public Partial Class DesignerChildForm
    Inherits MetroFramework.Forms.MetroForm
	Private Sub New()
	End Sub

	Public Sub New(fileName As String, showDialog As Boolean)
		InitializeComponent()

		'D: Pfad auf Sample-Hauptverzeichnis setzen, Datenbankpfad auslesen
		'US: Set path to main sample path, read database path
		Directory.SetCurrentDirectory(Application.StartupPath & "\..\..\..\")

		Try
			'D: Diverse List & Label Eigenschaften/Optionen setzen
			'US: Set some List & Label properties/options
			LL.AutoProjectFile = fileName
			LL.AutoShowSelectFile = showDialog
			LL.FileExtensions.SetFileExtension(LlProject.List, LlFileType.Project, "srt")
			LL.FileExtensions.SetFileExtension(LlProject.List, LlFileType.PrinterSettings, "srp")
			LL.FileExtensions.SetFileExtension(LlProject.List, LlFileType.Sketch, "srv")

			LL.DataSource = Me.CreateDataSet()
		Catch LlException As ListLabelException
			'D: Exception abfangen
			'US: Catch Exceptions
			MessageBox.Show("Information: " & LlException.Message & vbLf & vbLf & "This information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)

		End Try
	End Sub

	Private Function CreateDataSet() As DataSet
		'D:  Datenbankpfad auslesen
		'US: read database path
		Dim installKey As RegistryKey = Registry.CurrentUser.CreateSubKey("Software\combit\cmbtll")

		Dim databasePath As String = [String].Empty
		If installKey IsNot Nothing Then
			databasePath = DirectCast(installKey.GetValue("NWINDPath", String.Empty), String)
		End If

		If databasePath.Length = 0 Then
			MessageBox.Show("Unable to find sample database. Make sure List & Label is installed correctly.", "List & Label")
		End If

		Dim ds As New DataSet()

		'D: DataSet Objekt erstellen
		'US: Create the DataSet object
		Dim conn As New OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" & databasePath)

		conn.Open()

		Dim restrictions As Object() = New [Object]() {Nothing, Nothing, Nothing, "TABLE"}
		Dim table As DataTable = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, restrictions)

		'D: Durch alle Tabellen iterieren und in das DataSet aufnehmen
		'US: Iterate all tabels and add them to the DataSet
		For Each dr As DataRow In table.Rows
			Dim tableName As String = dr("Table_Name").ToString()
			Dim dataAdapter As OleDbDataAdapter

			'D: Die "Orders" und "Order Details" Tabelle einschrÃ¤nken.
			'US: Limit the "Order" an "Order Details" table. 
			If tableName = "Orders" OrElse tableName = "Order Details" Then
				dataAdapter = New OleDbDataAdapter(New OleDbCommand("SELECT * FROM [" & tableName & "] WHERE OrderID > 11040", conn))
			Else
				dataAdapter = New OleDbDataAdapter(New OleDbCommand("SELECT * FROM [" & tableName & "]", conn))
			End If

			dataAdapter.FillSchema(ds, SchemaType.Source, tableName)

			dataAdapter.Fill(ds, tableName)
		Next

		Dim restrictions1 As Object() = New [Object]() {Nothing, Nothing, Nothing, Nothing}
		Dim table1 As DataTable = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Foreign_Keys, restrictions1)

		'D: Relationen auslesen
		'US: Get relations
		For Each dr As DataRow In table1.Rows
			Dim sChildTable As String = dr("FK_TABLE_NAME").ToString()
			Dim sChildCol As String = dr("FK_COLUMN_NAME").ToString()
			' D:  Eltern = Primary
			'US: Parent = primary
			Dim sParentTable As String = dr("PK_TABLE_NAME").ToString()
			Dim sParentCol As String = dr("PK_COLUMN_NAME").ToString()
			Dim sRelationName As String = sParentTable & "2" & sChildTable

			'D: Beziehung zwischen den Tabellen definieren
			'US: Create the relationships between the tables
			ds.Relations.Add(New DataRelation(sRelationName, ds.Tables(sParentTable).Columns(sParentCol), ds.Tables(sChildTable).Columns(sChildCol)))
		Next

		'D: Verbindung schliessen
		'US: Close connection
		conn.Close()
		Return (ds)
	End Function

    Private Sub DesignerChildForm_FormClosing(sender As Object, e As FormClosingEventArgs) Handles MyBase.FormClosing
        If Not designerControl1.CanClose() Then
            e.Cancel = True
        End If
    End Sub

    Private Sub DesignerChildForm_Shown(sender As Object, e As EventArgs) Handles MyBase.Shown
        Me.ParentForm.ControlBox() = True
    End Sub
End Class

using System;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.Windows.Forms;
using combit.Reporting;

namespace unicode
{
    public partial class Form1 : Form
    {

        private enum JobType
        {
            Design,
            Print
        }

        public Form1()
        {
            InitializeComponent();

            // Change Directory - needed while running within the IDE
            if (!File.Exists("Address.mdb"))
            {
                Directory.SetCurrentDirectory(@"..\..\..\..\..\Report Files");
            }

            // Do not modify variables
            globalLL.Core.LlSetOption(LlOption.XlatVarnames, 0);
        }

        // create Dataset from address.mdb
        private DataSet CreateDataSet()
        {
            DataSet ds = new DataSet();
            string connectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + Path.GetDirectoryName(Application.ExecutablePath) + @"..\..\..\..\..\..\Report Files\Address.mdb";
            OleDbConnection myOleDbConnection = new OleDbConnection(connectionString);
            myOleDbConnection.Open();

            OleDbDataAdapter dataAdapter;
            dataAdapter = new OleDbDataAdapter(new OleDbCommand("SELECT * FROM Persons", myOleDbConnection));
            dataAdapter.FillSchema(ds, SchemaType.Source, "Persons");
            dataAdapter.Fill(ds, "Persons");

            return ds;
        }

        [STAThread]
        public static void Main()
        {
            SetProcessDPIAware();
            Application.EnableVisualStyles();
            Application.Run(new Form1());
        }
        [System.Runtime.InteropServices.DllImport("user32.dll")]
        private static extern bool SetProcessDPIAware();

        private void Button1_Click(object sender, EventArgs e)
        {
            ExecuteLLJob(JobType.Design, LlProject.Label, "simple_unicode.lbl");
        }

        private void Button3_Click(object sender, EventArgs e)
        {
            ExecuteLLJob(JobType.Design, LlProject.List, "simple_unicode.lst");
        }

        private void Button2_Click(object sender, EventArgs e)
        {
            ExecuteLLJob(JobType.Print, LlProject.Label, "simple_unicode.lbl");
        }

        private void Button4_Click(object sender, EventArgs e)
        {
            ExecuteLLJob(JobType.Print, LlProject.List, "simple_unicode.lst");
        }

        private void ExecuteLLJob(JobType jobType, LlProject projectType, string projectFile)
        {
            // Following best practices, we are using a new instance for every job
            using (ListLabel LL = new ListLabel())
            {
                // Do not modify variables
                LL.Core.LlSetOption(LlOption.XlatVarnames, 0);

                // Now bind to the DataSet
                LL.SetDataBinding(CreateDataSet(), string.Empty);

                try
                {
                    LL.AutoProjectFile = projectFile;
                    LL.AutoProjectType = projectType;
                    LL.AutoShowSelectFile = false;
                    switch (jobType)
                    {
                        case JobType.Print:
                            LL.Print();
                            break;

                        case JobType.Design:
                            LL.Design();
                            break;
                    }
                }
                catch (ListLabelException LlException)
                {
                    // Catch Exceptions
                    ShowExceptionMessageBox(LlException);
                }
            }
        }

        private void ShowExceptionMessageBox(ListLabelException exception)
        {
            MessageBox.Show("Information: " + exception.Message + "\n\nThis information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
    }
}

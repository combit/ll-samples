using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using combit.Reporting.DesignerExtensions;
using GMap.NET.WindowsForms;
using GMap.NET.WindowsForms.Markers;
using GMap.NET;
using combit.Reporting;
using combit.ListLabel.DesignerExtensions;
using System.Text.RegularExpressions;
using System.Collections.ObjectModel;

/*
This code uses substantial portions of GMap.NET (https://github.com/judero01col/GMap.NET). Please take note of the following license that is attached to GMap.NET:

Copyright (c) MainSoft Technology 2016

WARNING: This software can access some map providers and may viotile their Terms of Service, you use it at your own risk, nothing is forcing you to accept this Source itself is legal!

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

namespace DesignerProperty
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
       
        // D: Datenquelle, Objekte initialisieren 
        //US: Datasource, initialization of used objects
        private void Form1_Load(object sender, EventArgs e)
        {
            string[] cities = { "Konstanz","Mexiko-City","New York","Seoul","Mumbai","São Paulo","Manila","Jakarta","Delhi","Kairo","Istanbul","Shanghai","München","Los Angeles","Tokyo","Buenos Aires","Paris","Berlin","London","Sydney" };
            string pattern = @"TextBox(\d+)";
            Regex r = new Regex(pattern);

            foreach (Control ctrl in this.Controls["groupBox1"].Controls)
            {
                Match m = r.Match(ctrl.Name);
                if (m.Success)
                {
                    ctrl.Text = cities[Convert.ToInt32(m.Groups[1].Value)-1];
                }
            }
          
            // D: Zuweisung DesignerObjekt
            //US: Assignment DesignerObject
            MapsObject MapObj = new MapsObject("MapsObject", "Maps Objekt", (System.Drawing.Icon)(DesignerProperty.Properties.Resources.MapsObj));
            LL.DesignerObjects.Add(MapObj);
            
            // D: Projektdatei
            //US: Projectfile
            LL.AutoProjectFile = Application.StartupPath + @"\..\..\..\..\..\..\Report Files\Maps.lst";

            // D: Anzeige "Datei öffnen..."-Dialog
            //US: Show "File open" dialog
            LL.AutoShowSelectFile = false;
        }

        // D: Textobjekte mit Inhalt füllen
        //US: Fill text objects
        private ReadOnlyCollection<String> GetDatasource()
        {
            string[] cities = new string[20];

            string pattern = @"textBox(\d+)";
            Regex r = new Regex(pattern);

            foreach (Control ctrl in this.Controls["groupBox1"].Controls)
            {
                Match m = r.Match(ctrl.Name);
                if (m.Success)
                {
                    cities[Convert.ToInt32(m.Groups[1].Value) - 1] = ctrl.Text;
                }
            }

            return cities.ToList().AsReadOnly();
        }
        
        // D: Design
        //US: Design
        private void Button1_Click(object sender, EventArgs e)
        {
            try
            {
                // D: Datenquelle zuweisen
                //US: Data source 
                LL.DataSource = GetDatasource();
                
                // D: Designer starten
                //US: Start designer
                LL.Design();
             
            }
            catch (ListLabelException LlException)
            {
                // D: Exception abfangen
                //US: Catch Exceptions
                MessageBox.Show("Information: " + LlException.Message + "\n\nThis information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        // D: Druck
        //US: Print
        private void Button2_Click(object sender, EventArgs e)
        {
            try
            {   // D: Statusanzeige bei Druck
                //US: Printing state
                LL.AutoBoxType = LlBoxType.StandardAbort;
                
                // D: Druckziel
                //US: Destination
                LL.AutoDestination = LlPrintMode.Export;
                
                // D: Datenquelle zuweisen
                //US: Data source 
                LL.DataSource = GetDatasource();

                // D: Druck starten
                //US: Start printing
                LL.Print();
            }
            catch (ListLabelException LlException)
            {
                // D: Exception abfangen
                //US: Catch Exceptions
                MessageBox.Show("Information: " + LlException.Message + "\n\nThis information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
    }
}

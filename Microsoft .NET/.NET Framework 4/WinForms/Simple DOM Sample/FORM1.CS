using System;
using System.Data;
using System.Data.OleDb;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using combit.Reporting;
using combit.Reporting.Dom;
using Microsoft.Win32;
namespace DOMSimple
{
    public partial class Form1 : Form
    {
        private DataSet _dataSet;

        public Form1()
        {
            Directory.SetCurrentDirectory(@"..\..\..\..\..\Report Files");
            InitializeComponent();

            InitDataSet();
        }

        // Init Data Set to access nwind.mdb
        private void InitDataSet()
        {
            RegistryKey installKey = Registry.CurrentUser.CreateSubKey(@"Software\combit\cmbtll");
            String databasePath = String.Empty;
            if (installKey != null)
            {
                databasePath = (string)installKey.GetValue("NWINDPath", "");
            }

            if (databasePath.Length == 0)
                MessageBox.Show("Unable to find sample database. Make sure List & Label is installed correctly.", "List & Label");

            _dataSet = new DataSet();
            string connectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + databasePath;
            OleDbConnection myOleDbConnection = new OleDbConnection(connectionString);
            myOleDbConnection.Open();

            object[] restrictions = new Object[] { null, null, null, "TABLE" };
            DataTable table = myOleDbConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, restrictions);

            //D: Durch alle Tabellen iterieren und in das DataSet aufnehmen
            //US: Iterate all tables and add them to the DataSet
            foreach (DataRow dr in table.Rows)
            {
                string tableName = dr["Table_Name"].ToString();
                OleDbDataAdapter dataAdapter;

                //D: Die "Orders" und "Order Details" Tabelle einschränken.
                //US: Limit the "Order" and "Order Details" table. 
                if (tableName == "Orders" || tableName == "Order Details")
                    dataAdapter = new OleDbDataAdapter(new OleDbCommand("SELECT * FROM [" + tableName + "] WHERE OrderID > 11040", myOleDbConnection));
                else
                    dataAdapter = new OleDbDataAdapter(new OleDbCommand("SELECT * FROM [" + tableName + "]", myOleDbConnection));

                if (tableName == "Order Details")
                    tableName = tableName.Replace(" ", "_");

                dataAdapter.FillSchema(_dataSet, SchemaType.Source, tableName);
                dataAdapter.Fill(_dataSet, tableName);
            }

            //D: Verbindung schliessen
            //US: Close connection
            myOleDbConnection.Close();
        }

        [STAThread]
        public static void Main()
        {
            SetProcessDPIAware();
            Application.EnableVisualStyles();
            Application.Run(new Form1());
        }
        [System.Runtime.InteropServices.DllImport("user32.dll")]
        private static extern bool SetProcessDPIAware();

        private void Form1_Load(object sender, System.EventArgs e)
        {
            //D: Alle verfügbaren Tabellen in das Control schreiben
            //US: Add all available tables to the control
            foreach (DataTable dt in _dataSet.Tables)
                comboBoxTable.Items.Add(dt.TableName);


            //D: Ersten Eintrag selektieren
            //US: Select first entry
            comboBoxTable.SelectedIndex = 0;

            textBox2.Text = Path.Combine(Directory.GetCurrentDirectory(), "sunshine.gif");
        }

        private void DesignProject_Click(object sender, EventArgs e)
        {
            try
            {
                //D: An das DataSet Objekt binden
                //US: Bind to the DataSet
                LL.SetDataBinding(_dataSet, comboBoxTable.Text);

                //D: List & Label Projekt anhand Einstellungen erstellen
                //US: Create List & Label project based on the settings
                GenerateLLProject();

                //D: Designer aufrufen
                //US: Call the designer
                LL.Design(LlProject.List, Path.Combine(Application.StartupPath, "dynamic.lst"));
            }
            catch (ListLabelException LlException)
            {
                //D: Exception abfangen
                //US: Catch Exceptions
                MessageBox.Show("Information: " + LlException.Message + "\n\nThis information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void PrintProject_Click(object sender, EventArgs e)
        {
            try
            {
                //D: An das DataSet Objekt binden
                //US: Now bind to the DataSet
                LL.SetDataBinding(_dataSet, comboBoxTable.Text);

                //D: List & Label Projekt anhand Einstellungen erstellen
                //US: Create List & Label project based on the settings
                GenerateLLProject();

                //D: Drucken
                //US: Print
                LL.Print(LlProject.List, Path.Combine(Application.StartupPath, "dynamic.lst"));
            }
            catch (ListLabelException LlException)
            {
                //D: Exception abfangen
                //US: Catch Exceptions
                MessageBox.Show("Information: " + LlException.Message + "\n\nThis information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        //D: Hinweis: Beim Verwenden der List & Label DOM Klassen ist zu beachten, dass die einzelnen Eigenschafts-Werte als Zeichenkette angegeben werden           
        //	   müssen. Dies ist notwendig um ein Höchstmaß an Flexibilität zu gewährleisten, da somit auch List & Label Formeln erlaubt sind.

        //US: Hint: When using List & Label DOM classes please note that the property values have to be passed as strings. This is necessary to ensure a
        //		 maximum of flexibility - om this way, List & Label formulas can be used as property values.
        private void GenerateLLProject()
        {
            try
            {
                //D: Neues DOM-Projekt vom Typen LlProject.List erzeugen
                //US: Create new DOM project, type LlProject.List
                using (ProjectList proj = new ProjectList(LL))
                {
                    //D: Dateinamen und Dateizugriffsoptionen setzen
                    //US: Set file name and file access options
                    proj.Open(Path.Combine(Application.StartupPath, "dynamic.lst"), LlDomFileMode.Create, LlDomAccessMode.ReadWrite);

                    //D: Standardschrift und -größe setzen
                    //US: Set default font and size
                    proj.Settings.DefaultFont.FaceName = "Calibri";
                    proj.Settings.DefaultFont.Size = "12";

                    //D: Designschema setzen
                    //US: Set design scheme
                    proj.ProjectParameters["LL.DesignScheme"].Contents = "\"COMBITCOLORWHEEL\"";

                    //D: Eine neue Projektbeschreibung zuweisen
                    //US: Assign new project description
                    proj.ProjectParameters["LL.ProjectDescription"].Contents = textBox1.Text;

                    //D: Ein leeres Text Objekt erstellen
                    //US: Create an empty text object
                    ObjectText llobjText = new ObjectText(proj.Objects);

                    //D: Auslesen der Seitenkoordinaten der ersten Seite
                    //US: Get the coordinates for the first page
                    Size pageExtend = proj.Regions[0].Paper.Extent.Get();

                    //D: Setzen von Eigenschaften für das Textobjekt. Alle Einheiten sind SCM (1/1000 mm).
                    //US: Set some properties for the text object. All units are SCM (1/1000 mm).
                    llobjText.Position.Set(10000, 10000, pageExtend.Width - 65000, 27000);

                    //D: Hinzufügen eines Absatzes und setzen diverser Eigenschaften
                    //US: Add a paragraph to the text object and set some properties
                    Paragraph llobjParagraph = new Paragraph(llobjText.Paragraphs);
                    llobjParagraph.Contents = string.Format("\"{0}\"", textBox1.Text);
                    llobjParagraph.Font.Bold = "True";

                    //D: Hinzufügen eines Grafikobjekts
                    //US: Add a drawing object
                    ObjectDrawing llobjPic = new ObjectDrawing(proj.Objects);
                    llobjPic.Source.FileInfo.FileName = textBox2.Text;
                    llobjPic.Position.Set(pageExtend.Width - 50000, 10000, pageExtend.Width - (pageExtend.Width - 40000), 27000);

                    //D: Hinzufügen eines Tabellencontainers und setzen diverser Eigenschaften
                    //US: Add a table container and set some properties
                    ObjectReportContainer container = new ObjectReportContainer(proj.Objects);
                    container.Position.Set(10000, 40000, pageExtend.Width - 20000, pageExtend.Height - 44000);

                    //D: In dem Tabellencontainer eine Tabelle hinzufügen
                    //US: Add a table into the table container
                    SubItemTable table = new SubItemTable(container.SubItems);

                    //D: Gewünschte Tabelle als Datenquelle setzen
                    //US: Set required source table
                    table.TableId = comboBoxTable.Text;

                    //D: Zebramuster für Tabelle definieren
                    //US: Define zebra pattern for table
                    table.LineOptions.Data.ZebraPattern.Style = "1";
                    table.LineOptions.Data.ZebraPattern.Pattern = "1";
                    table.LineOptions.Data.ZebraPattern.Color = "LL.Scheme.BackgroundColor0";

                    //D: Eine neue Datenzeile hinzufügen mit allen ausgewählten Feldern
                    //US: Add a new data line including all selected fields
                    TableLineData tableLineData = new TableLineData(table.Lines.Data);
                    TableLineHeader tableLineHeader = new TableLineHeader(table.Lines.Header);

                    foreach (string fieldName in listBox2.Items)
                    {
                        string fieldWidth = (Convert.ToInt32(container.Position.Width) / listBox2.Items.Count).ToString();

                        //D: Kopfzeile definieren
                        //US: Define header line
                        TableFieldText header = new TableFieldText(tableLineHeader.Fields);
                        header.Contents = string.Format("\"{0}\"", fieldName);
                        header.Filling.Style = "1";
                        header.Filling.Color = "LL.Scheme.BackgroundColor2";
                        header.Font.Bold = "True";
                        header.Font.Color = "LL.Color.White";
                        header.Width = fieldWidth;

                        //D: Datenzeile definieren
                        //US: Define data line
                        TableFieldText tableField = new TableFieldText(tableLineData.Fields);
                        tableField.Contents = comboBoxTable.Text + "." + fieldName;
                        tableField.Width = fieldWidth;
                        tableField.Filling.Pattern = "0";
                    }

                    //D: Projekt speichern
                    //US: Save project
                    proj.Save();
                }
            }
            catch (ListLabelException LlException)
            {
                //D: Exception abfangen
                //US: Catch Exceptions
                MessageBox.Show("Information: " + LlException.Message + "\n\nThis information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        void ComboBoxTable_SelectedIndexChanged(object sender, EventArgs e)
        {
            //D: Alle Felder aus der Liste löschen
            //US: Clear all fields from the list
            listBox1.Items.Clear();
            listBox2.Items.Clear();

            //D: Alle verfügbaren Felder in die ListBox einfügen
            //US: Add all available fields into the listbox
            foreach (DataColumn col in _dataSet.Tables[comboBoxTable.Text].Columns)
                listBox1.Items.Add(col.ColumnName);
        }

        private void SelectField_Click(object sender, EventArgs e)
        {
            if (sender == button1)
            {
                while (listBox1.SelectedItems.Count > 0)
                {
                    listBox2.Items.Add(listBox1.SelectedItems[0]);
                    listBox1.Items.Remove(listBox1.SelectedItems[0]);
                }
            }
            else if (sender == button2)
            {
                while (listBox2.SelectedItems.Count > 0)
                {
                    listBox1.Items.Add(listBox2.SelectedItems[0]);
                    listBox2.Items.Remove(listBox2.SelectedItems[0]);
                }
            }
        }

        private void Button3_Click(object sender, EventArgs e)
        {
            openFileDialog1.FileName = textBox2.Text;

            if (openFileDialog1.ShowDialog() == DialogResult.OK)
                textBox2.Text = openFileDialog1.FileName;
        }

        private void ListBox1_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            int index = listBox1.IndexFromPoint(e.Location);
            if (index != ListBox.NoMatches)
            {
                button1.PerformClick();
            }
        }

        private void ListBox2_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            int index = listBox2.IndexFromPoint(e.Location);
            if (index != ListBox.NoMatches)
            {
                button2.PerformClick();
            }
        }
    }
}

Imports System.Data
Imports System.Data.OleDb
Imports System.Drawing
Imports System.IO
Imports System.Windows.Forms
Imports combit.Reporting
Imports combit.Reporting.Dom
Imports Microsoft.Win32

Public Partial Class Form1
    Inherits Form
    Private _dataSet As DataSet
    Private _llFont As New Font(Font.FontFamily, 10, FontStyle.Regular)


    Public Sub New()
        Directory.SetCurrentDirectory("..\..\..\..\..\..\Report Files")
        InitializeComponent()
        InitDataSet()
	End Sub

    <STAThread>
    Public Shared Sub Main()
        SetProcessDPIAware()
        Application.EnableVisualStyles()
        Application.Run(New Form1())
    End Sub
    <System.Runtime.InteropServices.DllImport("user32.dll")>
    Private Shared Function SetProcessDPIAware() As Boolean
    End Function
    Private Sub Form1_Load(sender As Object, e As System.EventArgs) Handles MyBase.Load
        pictureBox1.Image = System.Drawing.SystemIcons.Information.ToBitmap()
        cmbSortCell.SelectedIndex = 0
        cmbSortRow.SelectedIndex = 0
        cmbPageFormat.SelectedIndex = 1

        _llFont = New Font(Font.FontFamily, 10, FontStyle.Regular)
    End Sub

    Private Sub PrintProject_Click(sender As Object, e As EventArgs) Handles button4.Click
        Try
            'D: An das DataSet Objekt binden
            'US: Now bind to the DataSet
            LL.SetDataBinding(_dataSet, String.Empty)

            'D: Die master Daten sollen als Felder angemeldet werden
            'US: we want to have the master data as fields
            LL.AutoMasterMode = LlAutoMasterMode.AsFields

            'D: List & Label Projekt anhand Einstellungen erstellen
            'US: Create List & Label project based on the settings
            GenerateLLProject()

            'D: Drucken
            'US: Print
            LL.Print(LlProject.List, Path.Combine(Application.StartupPath, "dynamic.lst"))
        Catch LlException As ListLabelException
            'D: Exception abfangen
            'US: Catch Exceptions
            MessageBox.Show("Information: " & LlException.Message & vbLf & vbLf & "This information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
        End Try
    End Sub

    Private Sub DesignProject_Click(sender As Object, e As EventArgs) Handles button2.Click
        Try
            'D: An das DataSet Objekt binden
            'US: Now bind to the DataSet
            LL.SetDataBinding(_dataSet, String.Empty)

            'D: Die master Daten sollen als Felder angemeldet werden
            'US: we want to have the master data as fields
            LL.AutoMasterMode = LlAutoMasterMode.AsFields

            'D: List & Label Projekt anhand Einstellungen erstellen
            'US: Create List & Label project based on the settings
            GenerateLLProject()

            'D: Designer aufrufen
            'US: Call the designer
            LL.Design(LlProject.List, Path.Combine(Application.StartupPath, "dynamic.lst"))
        Catch LlException As ListLabelException
            'D: Exception abfangen
            'US: Catch Exceptions
            MessageBox.Show("Information: " & LlException.Message & vbLf & vbLf & "This information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
        End Try
    End Sub

    'D: Hinweis: Beim Verwenden der List & Label DOM Klassen ist zu beachten, dass die einzelnen Werte als Zeichenkette angegeben werden müssen.
    '	   Dies ist notwendig um ein Höchstmaß an Flexibilität zu gewährleisten, da somit auch List & Label Formeln erlaubt sind.

    'US: Hint: When using List & Label DOM classes please notice, that the values have to be indicated as strings. This is necessary to ensure a
    '		 maximum of flexibility, as therefore List & Label formulas are allowed.
    Private Sub GenerateLLProject()
        'Cursor = Cursors.WaitCursor

        'P-File löschen
        LL.Core.LlSetPrinterToDefault(LlProject.List, Path.Combine(Application.StartupPath, "dynamic.lst"))

        Try
            'D: Neues DOM-Projekt vom Typen LlProject.List erzeugen
            'US: Create new DOM project, type LlProject.List
            Using proj As New ProjectList(LL)
                'D: Dateinamen und Dateizugriffsoptionen setzen
                'US: Set file name and file access options
                proj.Open(Path.Combine(Application.StartupPath, "dynamic.lst"), LlDomFileMode.Create, LlDomAccessMode.ReadWrite)

                'D Designschema setzen
                'US: Set design scheme
                proj.ProjectParameters("LL.DesignScheme").Contents = """COMBITCOLORWHEEL"""

                'D: Mit dieser Eigenschaft kann die Seitenausrichtung bestimmt werden
                'US: With this property you can set the page orientation
                proj.Regions(0).Paper.Orientation = (cmbPageFormat.SelectedIndex + 1).ToString()

                'D: Dem Projekt eine neue Projektbeschreibung zuweisen
                'US: Assign new project description to the project
                proj.ProjectParameters("LL.ProjectDescription").Contents = "Dynamically created project"

                'D: Ein leeres Text Objekt erstellen
                'US: Create an empty text object
                Dim llobjText As New ObjectText(proj.Objects)

                'D: Auslesen der Seitenkoordinaten der ersten Seite
                'US: Get the coordinates for the first page
                Dim pageExtend As Size = proj.Regions(0).Paper.Extent.[Get]()

                'D: Setzen von Eigenschaften für das Textobjekt
                'US: Set some properties for the text object
                llobjText.Position.[Set](10000, 10000, pageExtend.Width - 65000, 27000)
                llobjText.LayerId = 1

                'D: Hinzufügen eines Paragraphen und setzen diverser Eigenschaften
                'US: Add a paragraph to the text object and set some properties
                Dim llobjParagraph As New Paragraph(llobjText.Paragraphs)
                llobjParagraph.Contents = String.Format("""{0}""", textProjectTitle.Text)

                'D: Ändern der Standard Schriftart im Projekt
                'US: Change the default font for the project
                proj.Settings.DefaultFont.SetFont(_llFont)
				Dim color As Integer = (label38.ForeColor.B << 16) Or (label38.ForeColor.G << 8) Or label38.ForeColor.R
                proj.Settings.DefaultFont.Color = color.ToString()

                'D: Hinzufügen eines Grafikobjekts
                'US: Add a drawing object
                Dim llobjPic As New ObjectDrawing(proj.Objects)
                llobjPic.Source.FileInfo.FileName = "..\..\..\sunshine.gif"
                llobjPic.Position.[Set](pageExtend.Width - 50000, 10000, pageExtend.Width - (pageExtend.Width - 40000), 27000)
                llobjPic.LayerId = 1

                'D: Hinzufügen eines Tabellencontainers und setzen diverser Eigenschaften
                'US: Add a table container and set some properties
                Dim container As New ObjectReportContainer(proj.Objects)
                container.Position.[Set](10000, 40000, pageExtend.Width - 20000, pageExtend.Height - 44000)

                If optModeCustomer.Checked OrElse optModeTimePeriod.Checked Then
                    'D: In dem Container eine Kreuztabelle hinzufügen. 
                    'US: Add a crosstab into the container. 
                    Dim crosstab As New SubItemCrosstab(container.SubItems)

                    'D: Die Tabelle festlegen, aus der die Daten stammen sollen. Als Datenquelle wird die Tabelle "Order_Details" verwendet.
                    'US: Define the source table. We use the "Order_Details" table as data source.
                    crosstab.SourceTablePath = "Customers;Orders(Customers2Orders);Order_Details(Orders2Order Details)"

                    If optModeCustomer.Checked Then
                        'D: Hier lassen sich die Daten festlegen, welche für die Zeilen verwendet werden sollen
                        'US: Define the data which should be used for the rows
                        crosstab.Definition.Rows.Groupings.Add("Customers.Country")

                        'D: Hier lassen sich die Daten festlegen, welche für die Spalten verwendet werden sollen
                        'US: Define the data which should be used for the columns
                        crosstab.Definition.Columns.Groupings.Add("Orders.EmployeeID@Employees.EmployeeID:LastName")

                        'D: Die Überschrift der äussersten Spalten / Zeilen kann hier angegeben werden
                        'US: Define the outside cell / row title with the following line
                        crosstab.Definition.Rows.GroupLabel(1).Formula = """Countries"""
                        crosstab.Definition.Rows.GroupLabel(1).Font.Color = "LL.Color.White"
                        crosstab.Definition.Rows.GroupLabel(1).Font.Size = "12"
                        crosstab.Definition.Rows.GroupLabel(1).Font.Bold = "True"
                        crosstab.Definition.Rows.GroupLabel(1).Direction = "90"

                        crosstab.Definition.Columns.GroupLabel(1).Formula = """Employees"""
                        crosstab.Definition.Columns.GroupLabel(1).Font.Color = "LL.Color.White"
                        crosstab.Definition.Columns.GroupLabel(1).Font.Size = "12"
                        crosstab.Definition.Columns.GroupLabel(1).Font.Bold = "True"

                        'D: Text und Wert, welcher in allen Zellen angezeigt werden soll
                        'US: Text and value which should be used for all cells
                        crosstab.Definition.Cells.All.Formula = "Sum (Order_Details.Quantity * Order_Details.UnitPrice)"
                        crosstab.Definition.Cells.All.Value = "Sum (Order_Details.Quantity * Order_Details.UnitPrice)"

                        'D: Formatierung für die Zellen festlegen (Währungsformat)
                        'US: Apply currency formatter to the cells
                        Dim curr As New PropertyOutputFormatterCurrency(crosstab.Definition.Cells.All.OutputFormatter)
                    ElseIf optModeTimePeriod.Checked Then
                        'D: Hier lassen sich die Daten festlegen, welche für die Zeilen verwendet werden sollen
                        'US: Define the data which should be used for the rows
                        crosstab.Definition.Rows.Groupings.Add("Customers.ContactName")

                        'D: Hier lassen sich die Daten festlegen, welche für die Spalten verwendet werden sollen
                        'US: Define the data which should be used for the columns
                        crosstab.Definition.Columns.Groupings.Add("Year (Orders.OrderDate)")
                        crosstab.Definition.Columns.Groupings.Add("Month (Orders.OrderDate)")

                        'D: Die Überschrift der Spalten kann hier angegeben werden
                        'US: Define the cell title with the following line
                        crosstab.Definition.Columns.GroupLabel(1).Formula = "Year$ (Orders.OrderDate)"
                        crosstab.Definition.Columns.GroupLabel(1).Font.Color = "LL.Color.White"
                        crosstab.Definition.Columns.GroupLabel(1).Font.Bold = "True"

                        crosstab.Definition.Columns.GroupLabel(0).Formula = "Month$ (Orders.OrderDate)"

                        crosstab.Definition.Columns.SumLabel(2).Font.Color = "LL.Color.White"
                        crosstab.Definition.Columns.SumLabel(2).Font.Bold = "True"

                        'D: Die Überschrift der äussersten Spalten / Zeilen kann hier angegeben werden
                        'US: Define the outside cell / row title with the following line
                        crosstab.Definition.Columns.GroupLabel(2).Formula = """Order Date"""
                        crosstab.Definition.Columns.GroupLabel(2).Font.Color = "LL.Color.White"
                        crosstab.Definition.Columns.GroupLabel(2).Font.Size = "12"
                        crosstab.Definition.Columns.GroupLabel(2).Font.Bold = "True"

                        crosstab.Definition.Rows.GroupLabel(1).Formula = """Customers"""
                        crosstab.Definition.Rows.GroupLabel(1).Font.Color = "LL.Color.White"
                        crosstab.Definition.Rows.GroupLabel(1).Font.Size = "12"
                        crosstab.Definition.Rows.GroupLabel(1).Font.Bold = "True"
                        crosstab.Definition.Rows.GroupLabel(1).Direction = "90"

                        'D: Text und Wert, welcher in allen Zellen angezeigt werden soll
                        'US: Text and value, which should be used for all cells
                        crosstab.Definition.Cells.All.Formula = "Sum (Order_Details.Quantity * Order_Details.UnitPrice)"
                        crosstab.Definition.Cells.All.Value = "Sum (Order_Details.Quantity * Order_Details.UnitPrice)"

                        ' D: Spaltenüberschriften auf Folgeseiten wiederholen
                        ' US: Repeat column labels on following pages
                        crosstab.Definition.RowWrapping.RepeatLabels = "True"
                    End If

                    'D: Diverse Einstellungen für die Farbgebung der Zeilen setzen
                    'US: Define properties for the row color schema
                    crosstab.Definition.Rows.GroupLabel(0).Filling.Style = "1"
                    crosstab.Definition.Rows.GroupLabel(0).Filling.Color = String.Format("RGB ({0}, {1}, {2})", label25.BackColor.R, label25.BackColor.G, label25.BackColor.B)
                    crosstab.Definition.Rows.GroupLabel(0).Font.Color = "LL.Color.White"
                    crosstab.Definition.Rows.GroupLabel(0).Font.Bold = "True"

                    crosstab.Definition.Rows.SumLabel(1).Filling.Style = "1"
                    crosstab.Definition.Rows.SumLabel(1).Filling.Color = String.Format("RGB ({0}, {1}, {2})", label25.BackColor.R, label25.BackColor.G, label25.BackColor.B)
                    crosstab.Definition.Rows.SumLabel(1).Font.Color = "LL.Color.White"
                    crosstab.Definition.Rows.SumLabel(1).Font.Bold = "True"

                    'D: Festlegen, ob die Zeilen aufsteigend oder absteigend sortiert werden sollen
                    'US: Define whether the rows should be sorted ascending or descending
                    TryCast(crosstab.Definition.Rows.GroupLabel(0), CrosstabCellGroupLabel).SortOrderAscending.SortOrder = If(cmbSortRow.SelectedIndex = 0, "0", "1")

                    'D: Diverse Einstellungen für die Farbgebung der Spalten setzen
                    'US: Define properties for the column color schema
                    crosstab.Definition.Columns.GroupLabel(0).Filling.Style = "1"
                    crosstab.Definition.Columns.GroupLabel(0).Filling.Color = String.Format("RGB ({0}, {1}, {2})", label40.BackColor.R, label40.BackColor.G, label40.BackColor.B)
                    crosstab.Definition.Columns.GroupLabel(0).Font.Color = "LL.Color.White"
                    crosstab.Definition.Columns.GroupLabel(0).Font.Bold = "True"

                    crosstab.Definition.Columns.SumLabel(1).Filling.Style = "1"
                    crosstab.Definition.Columns.SumLabel(1).Filling.Color = String.Format("RGB ({0}, {1}, {2})", label40.BackColor.R, label40.BackColor.G, label40.BackColor.B)
                    crosstab.Definition.Columns.SumLabel(1).Font.Color = "LL.Color.White"
                    crosstab.Definition.Columns.SumLabel(1).Font.Bold = "True"

                    'D: Festlegen, ob die Spalten aufsteigend oder absteigend sortiert werden sollen
                    'US: Define whether the columns should be sorted ascending or descending
                    TryCast(crosstab.Definition.Columns.GroupLabel(0), CrosstabCellGroupLabel).SortOrderAscending.SortOrder = If(cmbSortCell.SelectedIndex = 0, "0", "1")

                ElseIf optModeChart.Checked Then

                    '**** D: Erstellen eines Kreisdiagramms ****
                    '**** US: Create a pie-chart ****

                    'D: In dem Container ein Chart-Objekt hinzufügen und dessen Namen vergeben. 
                    'US: Add a chart into the container and define its name. 
                    Dim chart As New SubItemChart(LlChartType.Pie2D, container.SubItems)
                    chart.Name = [Enum].GetName(GetType(LlChartType), LlChartType.Pie2D)

                    'D: Die Tabelle festlegen, aus der die Daten stammen sollen. Als Datenquelle wird die Tabelle "Order_Details" verwendet.
                    'US: Define the source table. We use the "Order_Details" table as data source.
                    chart.SourceTablePath = "Employees;Orders(Employees2Orders);Order_Details(Orders2Order Details)"

                    'D: Um Zugriff auf die Chart-Engine zu bekommen, muss diese zunächst in den passenden Typ konvertiert werden
                    'US: To access the chart-engine, it is necessary to convert it in the suitable type at first
                    Dim engine As PropertyChartEnginePie2D = DirectCast(chart.Definition.ChartEngine, PropertyChartEnginePie2D)

                    'D: In den folgenden Zeilen wird die Datenquelle angegeben
                    'US: In the following lines, the data source is defined
                    engine.XAxis.Value = "Employees.LastName + "", "" + Employees.FirstName"
                    engine.YAxis.Value = "Order_Details.UnitPrice*Order_Details.Quantity"
                    engine.YAxis.CoordinateLabelOnObject.Placement = "1"
                    engine.YAxis.CoordinateLabelOnObject.Contents = "LL.ChartObject.ArcValue"

                    'D: Die Überschrift des Charts kann hier angegeben werden
                    'US: Define the chart title with the following line
                    chart.Definition.Title.Contents = """" & textBox3.Text & """"
                    chart.Definition.Title.Font.Color = "LL.Color.Black"
                    chart.Definition.Title.Font.Bold = "True"
                    chart.Definition.Title.Font.Size = "14"

                    'D: Formatierung für die Legende
                    'US: Define the legend format
                    Dim curr As New PropertyOutputFormatterCurrency(engine.YAxis.CoordinateLabelOnObject.OutputFormatter)

                    'D: Eine Anzahl von zwei Nachkommastellen 
                    'US: A number of two decimal places
                    curr.CountOfDecimals = "2"


                    'D Hintergrundfarbe des Charts ausschalten
                    'US: Deactivate chart background color
                    chart.Definition.Background.Visible = "False"

                    '**** D: Erstellen eines Balkendiagramms ****
                    '**** US: Create a bar-chart ****

                    'D: In dem Container ein Chart-Objekt hinzufügen und dessen Namen vergeben. 
                    'US: Add a chart into the container and define its name. 
                    Dim chartBar As New SubItemChart(LlChartType.Bar2D, container.SubItems)
                    chartBar.Name = [Enum].GetName(GetType(LlChartType), LlChartType.Bar2D)

                    'D: Die Tabelle festlegen, aus der die Daten stammen sollen. Als Datenquelle wird die Tabelle "Order_Details" verwendet.
                    'US: Define the source table. We use the "Order_Details" table as data source.
                    chartBar.SourceTablePath = "Employees;Orders(Employees2Orders);Order_Details(Orders2Order Details)"

                    'D: Um Zugriff auf die Chart-Engine zu bekommen, muss diese zunächst in den passenden Typ konvertiert werden
                    'US: To access the chart-engine, it is necessary to convert it in the suitable type at first
                    Dim engineBar As PropertyChartEngineBar2D = DirectCast(chartBar.Definition.ChartEngine, PropertyChartEngineBar2D)

                    'D: In den folgenden Zeilen wird die Datenquelle angegeben
                    'US: In the following lines, the data source is defined
                    engineBar.XAxis.Value = "Employees.LastName + "", "" + Employees.FirstName"
                    engineBar.YAxes(0).Value = "Order_Details.UnitPrice*Order_Details.Quantity"
                    engineBar.YAxes(0).CoordinateLabelOnObject.Placement = "1"

                    'D: Die Überschrift des Charts kann hier angegeben werden
                    'US: Define the chart title with the following line
                    chartBar.Definition.Title.Contents = """" & textBox3.Text & """"
                    chartBar.Definition.Title.Font.Color = "LL.Color.Black"
                    chartBar.Definition.Title.Font.Bold = "True"
                    chartBar.Definition.Title.Font.Size = "14"

                    'D: Formatierung für die Legende
                    'US: Define the legend format
                    Dim currBar As New PropertyOutputFormatterCurrency(engineBar.YAxes(0).CoordinateLabelOnObject.OutputFormatter)

                    'D: Eine Anzahl von zwei Nachkommastellen 
                    'US: A number of two decimal places
                    currBar.CountOfDecimals = "2"


                    'D Hintergrundfarbe des Charts ausschalten
                    'US Deactivate chart background color
                    chartBar.Definition.Background.Visible = "False"

                End If

                'D: Hinzufügen eines Hilfs-Rechtecks. Wird verwendet um den Tabellencontainer auf der ersten Seite unterhalb der Überschrift anzuzeigen
                'US: Add a helper rectangle. This will be used for showing the tablecontainer at the first page under the title
                Dim llobjHelper As New ObjectRectangle(proj.Objects)

                'D: Setzen von Eigenschaften für das Rechteck
                'US: Set some properties for the rectangle
                llobjHelper.Position.[Set](10000, 10000, 1, 30000)
                llobjHelper.LayerId = 1
                llobjHelper.Frame.Color = "RGB(255, 255, 255)"

                'D: Den Berichtscontainer mit dem Rechteck Objekt verketten, so dass der Container auf den Folgeseiten mehr Platz einnimmt
                'US: Link the report container to the rectangle object in order to fill up space on following pages
                container.LinkTo(llobjHelper, LlDomVerticalLinkType.RelativeToEnd, LlDomVerticalSizeAdaptionType.Inverse)

                'D: Projekt als Datei speichern
                'US: Save project to file
                proj.Save()
            End Using
        Catch LlException As ListLabelException
            'D: Exception abfangen
            'US: Catch Exceptions
            MessageBox.Show("Information: " & LlException.Message & vbLf & vbLf & "This information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
        Finally
            Cursor = Cursors.[Default]
        End Try
	End Sub

	' Init Data Set to access nwind.mdb
	Private Sub InitDataSet()
		Dim installKey As RegistryKey = Registry.CurrentUser.CreateSubKey("Software\combit\cmbtll")

		Dim databasePath As String = [String].Empty
		If installKey IsNot Nothing Then
			databasePath = DirectCast(installKey.GetValue("NWINDPath", ""), String)
		End If

		If databasePath.Length = 0 Then
			MessageBox.Show("Unable to find sample database. Make sure List & Label is installed correctly.", "List & Label")
		End If

		_dataSet = New DataSet()
		Dim connectionString As String = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" & databasePath
		Dim myOleDbConnection As New OleDbConnection(connectionString)
		myOleDbConnection.Open()

		Dim restrictions As Object() = New [Object]() {Nothing, Nothing, Nothing, "TABLE"}
		Dim table As DataTable = myOleDbConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, restrictions)

		'D: Durch alle Tabellen iterieren und in das DataSet aufnehmen
		'US: Iterate all tabels and add them to the DataSet
		For Each dr As DataRow In table.Rows
			Dim tableName As String = dr("Table_Name").ToString()
			Dim dataAdapter As OleDbDataAdapter

			'D: Die "Orders" und "Order Details" Tabelle einschränken.
			'US: Limit the "Order" an "Order Details" table. 
			If tableName = "Orders" OrElse tableName = "Order Details" Then
				dataAdapter = New OleDbDataAdapter(New OleDbCommand("SELECT * FROM [" & tableName & "] WHERE OrderID > 10850", myOleDbConnection))
			Else
				dataAdapter = New OleDbDataAdapter(New OleDbCommand("SELECT * FROM [" & tableName & "]", myOleDbConnection))
			End If


			dataAdapter.FillSchema(_dataSet, SchemaType.Source, tableName)
			dataAdapter.Fill(_dataSet, tableName)
		Next


		Dim restrictions1 As Object() = New [Object]() {Nothing, Nothing, Nothing, Nothing}
		Dim table1 As DataTable = myOleDbConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Foreign_Keys, restrictions1)

		'D: Relationen auslesen
		'US: Get relations
		For Each dr As DataRow In table1.Rows
			Dim sChildTable As String = dr("FK_TABLE_NAME").ToString()
			Dim sChildCol As String = dr("FK_COLUMN_NAME").ToString()
			' D:  Eltern = Primary
			'US: Parent = primary
			Dim sParentTable As String = dr("PK_TABLE_NAME").ToString()
			Dim sParentCol As String = dr("PK_COLUMN_NAME").ToString()
			Dim sRelationName As String = sParentTable & "2" & sChildTable

			'D: Beziehung zwischen den Tabellen definieren
			'US: Create the relationships between the tables

			_dataSet.Relations.Add(New DataRelation(sRelationName, _dataSet.Tables(sParentTable).Columns(sParentCol), _dataSet.Tables(sChildTable).Columns(sChildCol)))
		Next

		'D: Verbindung schliessen
		'US: Close connection
		myOleDbConnection.Close()
	End Sub

    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles button1.Click
        SetLabelBackColor(label40)
    End Sub


    Private Sub Button9_Click(sender As Object, e As EventArgs) Handles button9.Click
        SetLabelBackColor(label25)
    End Sub

    Private Sub SetLabelBackColor(label As Label)
		Dim dlg As New ColorDialog()
		dlg.Color = label.BackColor

		If dlg.ShowDialog() = DialogResult.OK Then
			label.BackColor = dlg.Color
		End If
	End Sub

    Private Sub OptModeTimePeriod_Click(sender As Object, e As EventArgs) Handles optModeTimePeriod.Click, optModeCustomer.Click, optModeChart.Click
        If optModeCustomer.Checked Then
            label31.Enabled = InlineAssignHelper(textBox3.Enabled, False)
            label_Schema.Text = label8.Text
        ElseIf optModeTimePeriod.Checked Then
            label31.Enabled = InlineAssignHelper(textBox3.Enabled, False)
            label_Schema.Text = label9.Text
        ElseIf optModeChart.Checked Then
            label31.Enabled = InlineAssignHelper(textBox3.Enabled, True)
            label_Schema.Text = label9.Text
        End If
    End Sub

    Private Sub UpdateInfo()
		If optModeCustomer.Checked Then
            label_Schema.Text = label8.Text
        ElseIf optModeTimePeriod.Checked Then
            label_Schema.Text = label9.Text
		ElseIf optModeChart.Checked Then
            label_Schema.Text = label32.Text
            label_Title.Text = textBox3.Text
		End If

        label_Cell.Text = String.Format("RGB ({0}, {1}, {2})", label40.BackColor.R, label40.BackColor.G, label40.BackColor.B, cmbSortCell.Text)

        label_Row.Text = String.Format("RGB ({0}, {1}, {2})", label25.BackColor.R, label25.BackColor.G, label25.BackColor.B, cmbSortRow.Text)

        label_ProjectTitle.Text = textProjectTitle.Text
        label_DefFont.Text = _llFont.FontFamily.Name.ToString() & ", " & _llFont.Size.ToString()

	End Sub

    Private Sub TabControl1_SelectedIndexChanged(sender As Object, e As EventArgs) Handles tabControl1.SelectedIndexChanged
        UpdateInfo()
    End Sub

    Private Sub Button6_Click(sender As Object, e As EventArgs) Handles button6.Click
        Dim dlg As New ColorDialog()
        dlg.Color = label38.ForeColor

        If dlg.ShowDialog() = DialogResult.OK Then
            label38.ForeColor = dlg.Color
        End If
    End Sub

    Private Sub Button5_Click(sender As Object, e As EventArgs) Handles button5.Click
        fontDialog1.Font = _llFont
        If fontDialog1.ShowDialog() = DialogResult.OK Then
            _llFont = fontDialog1.Font
            label38.Font = _llFont
        End If
    End Sub

    Private Sub BtnNavigate_Click(sender As Object, e As EventArgs) Handles btnNext1.Click, btnNext3.Click, btnNext2.Click, btnPrev3.Click, btnPrev2.Click
        If sender Is btnPrev2 Then
            tabControl1.SelectedTab = tabPage1
        End If

        If sender Is btnNext1 Or sender Is btnPrev3 Then
            tabControl1.SelectedTab = tabPage2
        End If

        If sender Is btnNext2 Then
            tabControl1.SelectedTab = tabPage3
        End If

        If sender Is btnNext3 Then
            tabControl1.SelectedTab = tabPage4
        End If
    End Sub
    Private Shared Function InlineAssignHelper(Of T)(ByRef target As T, value As T) As T
		target = value
		Return value
	End Function

End Class

Imports System.Data
Imports System.Data.OleDb
Imports System.IO
Imports System.Windows.Forms
Imports combit.Reporting

Public Partial Class Form1
    Inherits Form

    Private Enum JobType
        Design
        Print
    End Enum

    Public Sub New()
		InitializeComponent()

		' Change Directory - needed while running within the IDE
		If Not File.Exists("Address.mdb") Then
            Directory.SetCurrentDirectory("..\..\..\..\..\..\Report Files")
        End If

        ' Do not modify variables
        globalLL.Core.LlSetOption(LlOption.XlatVarnames, 0)
    End Sub

    ' create Dataset from address.mdb
    Private Function CreateDataSet() As DataSet
        Dim ds As New DataSet()
        Dim connectionString As String = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" & Path.GetDirectoryName(Application.ExecutablePath) & "..\..\..\..\..\..\..\Report Files\Address.mdb"
        Dim myOleDbConnection As New OleDbConnection(connectionString)
        myOleDbConnection.Open()

        Dim restrictions As Object() = New [Object]() {Nothing, Nothing, Nothing, "TABLE"}
        Dim table As DataTable = myOleDbConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, restrictions)

        Dim dataAdapter As OleDbDataAdapter
        dataAdapter = New OleDbDataAdapter(New OleDbCommand("SELECT * FROM Persons", myOleDbConnection))
        dataAdapter.FillSchema(ds, SchemaType.Source, "Persons")
        dataAdapter.Fill(ds, "Persons")

        Return ds
    End Function


    <STAThread>
    Public Shared Sub Main()
        SetProcessDPIAware()
        Application.EnableVisualStyles()
        Application.Run(New Form1())
    End Sub
    <System.Runtime.InteropServices.DllImport("user32.dll")>
    Private Shared Function SetProcessDPIAware() As Boolean
    End Function

    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles button1.Click
        ExecuteLLJob(JobType.Design, LlProject.Label, "simple_unicode.lbl")
    End Sub

    Private Sub Button2_Click(sender As Object, e As EventArgs) Handles button2.Click
        ExecuteLLJob(JobType.Print, LlProject.Label, "simple_unicode.lbl")
    End Sub

    Private Sub Button3_Click(sender As Object, e As EventArgs) Handles button3.Click
        ExecuteLLJob(JobType.Design, LlProject.List, "simple_unicode.lst")
    End Sub

    Private Sub Button4_Click(sender As Object, e As EventArgs) Handles button4.Click
        ExecuteLLJob(JobType.Print, LlProject.List, "simple_unicode.lst")
    End Sub

    Private Sub ExecuteLLJob(jobType As JobType, projectType As LlProject, projectFile As String)
        Using LL As New ListLabel

            ' Do not modify variables
            LL.Core.LlSetOption(LlOption.XlatVarnames, 0)

            ' Now bind the DataSet
            LL.SetDataBinding(CreateDataSet(), String.Empty)

            Try
                LL.AutoProjectFile = projectFile
                LL.AutoProjectType = projectType
                LL.AutoShowSelectFile = False

                Select Case jobType
                    Case JobType.Print
                        LL.Print()

                    Case JobType.Design
                        LL.Design()
                End Select

            Catch llException As ListLabelException
                ' Catch Exceptions
                ShowExceptionMessageBox(llException)
            End Try
        End Using
    End Sub

    Private Sub ShowExceptionMessageBox(llException As ListLabelException)
        MessageBox.Show("Information: " + llException.Message + vbLf & vbLf & "This information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
    End Sub

End Class

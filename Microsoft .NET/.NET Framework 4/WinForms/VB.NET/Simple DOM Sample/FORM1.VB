Imports System.Data
Imports System.Data.OleDb
Imports System.Drawing
Imports System.IO
Imports System.Windows.Forms
Imports combit.Reporting
Imports combit.Reporting.Dom
Imports Microsoft.Win32

Public Partial Class Form1
    Inherits Form
    Private _dataSet As DataSet

	Public Sub New()
        Directory.SetCurrentDirectory("..\..\..\..\..\..\Report Files")
        InitializeComponent()

		InitDataSet()
	End Sub

	' Init Data Set to access nwind.mdb
	Private Sub InitDataSet()
		Dim installKey As RegistryKey = Registry.CurrentUser.CreateSubKey("Software\combit\cmbtll")
		Dim databasePath As [String] = [String].Empty
		If installKey IsNot Nothing Then
			databasePath = DirectCast(installKey.GetValue("NWINDPath", ""), String)
		End If

		If databasePath.Length = 0 Then
			MessageBox.Show("Unable to find sample database. Make sure List & Label is installed correctly.", "List & Label")
		End If

		_dataSet = New DataSet()
		Dim connectionString As String = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" & databasePath
		Dim myOleDbConnection As New OleDbConnection(connectionString)
		myOleDbConnection.Open()

		Dim restrictions As Object() = New [Object]() {Nothing, Nothing, Nothing, "TABLE"}
		Dim table As DataTable = myOleDbConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, restrictions)

		'D: Durch alle Tabellen iterieren und in das DataSet aufnehmen
		'US: Iterate all tables and add them to the DataSet
		For Each dr As DataRow In table.Rows
			Dim tableName As String = dr("Table_Name").ToString()
			Dim dataAdapter As OleDbDataAdapter

			'D: Die "Orders" und "Order Details" Tabelle einschränken.
			'US: Limit the "Order" and "Order Details" table. 
            If tableName = "Orders" OrElse tableName = "Order Details" Then
                dataAdapter = New OleDbDataAdapter(New OleDbCommand("SELECT * FROM [" & tableName & "] WHERE OrderID > 11040", myOleDbConnection))
            Else
                dataAdapter = New OleDbDataAdapter(New OleDbCommand("SELECT * FROM [" & tableName & "]", myOleDbConnection))
            End If

			If tableName = "Order Details" Then
				tableName = tableName.Replace(" ", "_")
			End If

			dataAdapter.FillSchema(_dataSet, SchemaType.Source, tableName)
			dataAdapter.Fill(_dataSet, tableName)
		Next

		'D: Verbindung schliessen
		'US: Close connection
		myOleDbConnection.Close()
	End Sub

    <STAThread>
    Public Shared Sub Main()
        SetProcessDPIAware()
        Application.EnableVisualStyles()
        Application.Run(New Form1())
    End Sub
    <System.Runtime.InteropServices.DllImport("user32.dll")>
    Private Shared Function SetProcessDPIAware() As Boolean
    End Function

    Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
        'D: Alle verfügbaren Tabellen in das Control schreiben
        'US: Add all available tables to the control
        For Each dt As DataTable In _dataSet.Tables
            comboBoxTable.Items.Add(dt.TableName)
        Next

        'D: Ersten Eintrag selektieren
        'US: Select first entry
        comboBoxTable.SelectedIndex = 0

        textBox2.Text = Path.Combine(Directory.GetCurrentDirectory(), "sunshine.gif")
    End Sub

    Private Sub DesignProject_Click(ByVal sender As Object, ByVal e As EventArgs) Handles button5.Click
        Try
            'D: An das DataSet Objekt binden
            'US: Bind to the DataSet
            LL.SetDataBinding(_dataSet, comboBoxTable.Text)

            'D: List & Label Projekt anhand Einstellungen erstellen
            'US: Create List & Label project based on the settings
            GenerateLLProject()

            'D: Designer aufrufen
            'US: Call the designer
            LL.Design(LlProject.List, Path.Combine(Application.StartupPath, "dynamic.lst"))
        Catch LlException As ListLabelException
            'D: Exception abfangen
            'US: Catch Exceptions
            MessageBox.Show("Information: " & LlException.Message & vbLf & vbLf & "This information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
        End Try
    End Sub

    Private Sub PrintProject_Click(ByVal sender As Object, ByVal e As EventArgs) Handles button4.Click
        Try
            'D: An das DataSet Objekt binden
            'US: Now bind to the DataSet
            LL.SetDataBinding(_dataSet, comboBoxTable.Text)

            'D: List & Label Projekt anhand Einstellungen erstellen
            'US: Create List & Label project based on the settings
            GenerateLLProject()

            'D: Drucken
            'US: Print
            LL.Print(LlProject.List, Path.Combine(Application.StartupPath, "dynamic.lst"))
        Catch LlException As ListLabelException
            'D: Exception abfangen
            'US: Catch Exceptions
            MessageBox.Show("Information: " & LlException.Message & vbLf & vbLf & "This information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
        End Try
    End Sub

    'D: Hinweis: Beim Verwenden der List & Label DOM Klassen ist zu beachten, dass die einzelnen Eigenschafts-Werte als Zeichenkette angegeben werden           
    '	   müssen. Dies ist notwendig um ein Höchstmaß an Flexibilität zu gewährleisten, da somit auch List & Label Formeln erlaubt sind.

    'US: Hint: When using List & Label DOM classes please note that the property values have to be passed as strings. This is necessary to ensure a
    '		 maximum of flexibility - om this way, List & Label formulas can be used as property values.
    Private Sub GenerateLLProject()
		Try
			'D: Neues DOM-Projekt vom Typen LlProject.List erzeugen
			'US: Create new DOM project, type LlProject.List
			Using proj As New ProjectList(LL)
				'D: Dateinamen und Dateizugriffsoptionen setzen
				'US: Set file name and file access options
				proj.Open(Path.Combine(Application.StartupPath, "dynamic.lst"), LlDomFileMode.Create, LlDomAccessMode.ReadWrite)

                'D Standardschrift und -größe setzen
                'US: Set default font and size
                proj.Settings.DefaultFont.FaceName = """Calibri"""
                proj.Settings.DefaultFont.Size = "12"

                'D Designschema setzen
                'US: Set design scheme
                proj.ProjectParameters("LL.DesignScheme").Contents = """COMBITCOLORWHEEL"""

                'D: Eine neue Projektbeschreibung zuweisen
                'US: Assign new project description
                proj.ProjectParameters("LL.ProjectDescription").Contents = textBox1.Text

				'D: Ein leeres Text Objekt erstellen
				'US: Create an empty text object
				Dim llobjText As New ObjectText(proj.Objects)

				'D: Auslesen der Seitenkoordinaten der ersten Seite
				'US: Get the coordinates for the first page
				Dim pageExtend As Size = proj.Regions(0).Paper.Extent.[Get]()

				'D: Setzen von Eigenschaften für das Textobjekt. Alle Einheiten sind SCM (1/1000 mm).
				'US: Set some properties for the text object. All units are SCM (1/1000 mm).
				llobjText.Position.[Set](10000, 10000, pageExtend.Width - 65000, 27000)

				'D: Hinzufügen eines Absatzes und setzen diverser Eigenschaften
				'US: Add a paragraph to the text object and set some properties
				Dim llobjParagraph As New Paragraph(llobjText.Paragraphs)
				llobjParagraph.Contents = String.Format("""{0}""", textBox1.Text)
				llobjParagraph.Font.Bold = "True"

				'D: Hinzufügen eines Grafikobjekts
				'US: Add a drawing object
				Dim llobjPic As New ObjectDrawing(proj.Objects)
				llobjPic.Source.FileInfo.FileName = textBox2.Text
				llobjPic.Position.[Set](pageExtend.Width - 50000, 10000, pageExtend.Width - (pageExtend.Width - 40000), 27000)

				'D: Hinzufügen eines Tabellencontainers und setzen diverser Eigenschaften
				'US: Add a table container and set some properties
				Dim container As New ObjectReportContainer(proj.Objects)
				container.Position.[Set](10000, 40000, pageExtend.Width - 20000, pageExtend.Height - 44000)

				'D: In dem Tabellencontainer eine Tabelle hinzufügen
				'US: Add a table into the table container
				Dim table As New SubItemTable(container.SubItems)

				'D: Gewünschte Tabelle als Datenquelle setzen
				'US: Set required source table
				table.TableId = comboBoxTable.Text

				'D: Zebramuster für Tabelle definieren
				'US: Define zebra pattern for table
				table.LineOptions.Data.ZebraPattern.Style = "1"
				table.LineOptions.Data.ZebraPattern.Pattern = "1"
                table.LineOptions.Data.ZebraPattern.Color = "LL.Scheme.BackgroundColor0"

                'D: Eine neue Datenzeile hinzufügen mit allen ausgewählten Feldern
                'US: Add a new data line including all selected fields
                Dim tableLineData As New TableLineData(table.Lines.Data)
				Dim tableLineHeader As New TableLineHeader(table.Lines.Header)

				For Each fieldName As String In listBox2.Items
					Dim fieldWidth As String = (Convert.ToInt32(container.Position.Width) \ listBox2.Items.Count).ToString()

					'D: Kopfzeile definieren
					'US: Define header line
					Dim header As New TableFieldText(tableLineHeader.Fields)
					header.Contents = String.Format("""{0}""", fieldName)
                    header.Filling.Style = "1"
                    header.Filling.Color = "LL.Scheme.BackgroundColor2"
                    header.Font.Bold = "True"
                    header.Font.Color = "LL.Color.White"
                    header.Width = fieldWidth

					'D: Datenzeile definieren
					'US: Define data line
					Dim tableField As New TableFieldText(tableLineData.Fields)
					tableField.Contents = comboBoxTable.Text & "." & fieldName
                    tableField.Width = fieldWidth
                    tableField.Filling.Pattern = "0"
                Next

				'D: Projekt speichern
				'US: Save project
				proj.Save()
			End Using
		Catch LlException As ListLabelException
			'D: Exception abfangen
			'US: Catch Exceptions
			MessageBox.Show("Information: " & LlException.Message & vbLf & vbLf & "This information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
		End Try
	End Sub

    Private Sub ComboBoxTable_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles comboBoxTable.SelectedIndexChanged
        'D: Alle Felder aus der Liste löschen
        'US: Clear all fields from the list
        listBox1.Items.Clear()
        listBox2.Items.Clear()

        'D: Alle verfügbaren Felder in die ListBox einfügen
        'US: Add all available fields into the listbox
        For Each col As DataColumn In _dataSet.Tables(comboBoxTable.Text).Columns
            listBox1.Items.Add(col.ColumnName)
        Next
    End Sub

    Private Sub SelectField_Click(ByVal sender As Object, ByVal e As EventArgs) Handles button2.Click, button1.Click
        If sender Is button1 Then
            While listBox1.SelectedItems.Count > 0
                listBox2.Items.Add(listBox1.SelectedItems(0))
                listBox1.Items.Remove(listBox1.SelectedItems(0))
            End While
        ElseIf sender Is button2 Then
            While listBox2.SelectedItems.Count > 0
                listBox1.Items.Add(listBox2.SelectedItems(0))
                listBox2.Items.Remove(listBox2.SelectedItems(0))
            End While
        End If
    End Sub

    Private Sub Button3_Click(ByVal sender As Object, ByVal e As EventArgs) Handles button3.Click
        openFileDialog1.FileName = textBox2.Text

        If openFileDialog1.ShowDialog() = DialogResult.OK Then
            textBox2.Text = openFileDialog1.FileName
        End If
    End Sub

    Private Sub ListBox1_MouseDoubleClick(ByVal sender As Object, ByVal e As MouseEventArgs) Handles listBox1.MouseDoubleClick
        Dim index As Integer = listBox1.IndexFromPoint(e.Location)
        If index <> ListBox.NoMatches Then
            button1.PerformClick()
        End If
    End Sub

    Private Sub ListBox2_MouseDoubleClick(ByVal sender As Object, ByVal e As MouseEventArgs) Handles listBox2.MouseDoubleClick
        Dim index As Integer = listBox2.IndexFromPoint(e.Location)
        If index <> ListBox.NoMatches Then
            button2.PerformClick()
        End If
    End Sub

    Private Sub ListBox1_DrawItem(sender As Object, e As DrawItemEventArgs) Handles listBox1.DrawItem
        ChangeListBoxHighlightColor(listBox1, e)
    End Sub

    Private Sub ListBox2_DrawItem(sender As Object, e As DrawItemEventArgs) Handles listBox2.DrawItem
        ChangeListBoxHighlightColor(listBox2, e)
    End Sub

    Private Sub ChangeListBoxHighlightColor(listBox As ListBox, e As DrawItemEventArgs)
        If e.Index < 0 Then
            Return
        End If
        If (e.State And DrawItemState.Selected) = DrawItemState.Selected Then
            e = New DrawItemEventArgs(e.Graphics, e.Font, e.Bounds, e.Index, e.State Xor DrawItemState.Selected, e.ForeColor, _
                Color.FromArgb(0, 174, 219))
        End If

        e.DrawBackground()
        e.Graphics.DrawString(listBox.Items(e.Index).ToString(), e.Font, Brushes.Black, e.Bounds, StringFormat.GenericDefault)
        e.DrawFocusRectangle()
    End Sub

End Class

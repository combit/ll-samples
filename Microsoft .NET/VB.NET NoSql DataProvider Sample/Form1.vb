Imports System
Imports System.Drawing
Imports System.IO
Imports System.Windows.Forms
Imports combit.ListLabel24
Imports combit.ListLabel24.DataProviders
Imports combit.ListLabel24.Dom
Imports MetroFramework.Forms
Imports System.Text.RegularExpressions
Partial Public Class Form1
    Inherits MetroFramework.Forms.MetroForm
    Private _dataProvider As IDataProvider = Nothing
    Private _dataProviderTables As System.Collections.ObjectModel.ReadOnlyCollection(Of ITable) = Nothing
    Private _hasPassedTest As Boolean = False

    <STAThread>
    Public Shared Sub Main()
        Application.EnableVisualStyles()
        Application.Run(New Form1())
    End Sub

    Public Sub New()
        Directory.SetCurrentDirectory("..\..\..\")
        InitializeComponent()
        InitializeComboBoxProvider()
    End Sub

    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load

        tabControl1.SelectedTab = tabPage1
    End Sub

    Private Sub ButtonNavigate(sender As Object, e As EventArgs) Handles ButtonNextTabpage1.Click, ButtonBackTabpage2.Click
        If sender.Equals(ButtonNextTabpage1) Then
            tabControl1.SelectedTab = tabPage2
        ElseIf sender.Equals(ButtonBackTabpage2) Then
            tabControl1.SelectedTab = tabPage1
        End If
    End Sub

    Private Sub ControlInputChanged(sender As Object, e As EventArgs) Handles TextBoxUsername.TextChanged, TextBoxPort.TextChanged, TextBoxPassword.TextChanged, TextBoxDBName.TextChanged, TextBoxAddress.TextChanged, TextBoxTableID.TextChanged, TextBoxRefreshToken.TextChanged, TextBoxClientID.TextChanged, TextBoxObjects.TextChanged, TextBoxDomain.TextChanged, TextBoxClientSecret.TextChanged, TextBoxKeySpace.TextChanged
        ButtonNextTabpage1.Enabled = False
        _hasPassedTest = False
    End Sub

    Private Sub TabControl1_Selecting(sender As Object, e As TabControlCancelEventArgs) Handles tabControl1.Selecting
        If Not _hasPassedTest Then
            e.Cancel = True
        End If
    End Sub
#Region "DataProvider Settings Tabview"
    Private Sub InitializeComboBoxProvider()

        'D: Alle verfügbaren Datenprovider in die comboBox einfügen
        'US: Add all available data providers into the comboBox
        ComboBoxDataProvider.Items.Add("Cassandra")
        ComboBoxDataProvider.Items.Add("MongoDB")
        ComboBoxDataProvider.Items.Add("Salesforce")
        ComboBoxDataProvider.Items.Add("SharePoint")
        ComboBoxDataProvider.Items.Add("Google Spreadsheets (Public)")
        ComboBoxDataProvider.Items.Add("Google Spreadsheets (Private)")
        ComboBoxDataProvider.SelectedIndex = 0
    End Sub

    Private Function CreateDataProvider(selectedProvider As String) As IDataProvider
        'D: Den korrekten Datenprovider initialisieren
        'US: Initialize the correct data provider
        Dim provider As IDataProvider = Nothing
        Try
            Select Case selectedProvider
                Case "Cassandra"
                    provider = New CassandraDataProvider(TextBoxAddress.Text, TextBoxKeySpace.Text)
                    Exit Select
                Case "MongoDB"
                    provider = New MongoDBDataProvider(TextBoxAddress.Text, TextBoxDBName.Text, TextBoxUsername.Text, TextBoxPassword.Text, TextBoxPort.Text)
                    Exit Select
                Case "Salesforce"
                    provider = New SalesforceDataProvider(TextBoxUsername.Text, TextBoxPassword.Text, TextBoxObjects.Text.Trim().Split(","c), TextBoxAddress.Text)
                    Exit Select
                Case "SharePoint"
                    provider = New SharePointDataProvider(TextBoxAddress.Text, TextBoxUsername.Text, TextBoxPassword.Text, TextBoxDomain.Text)
                    Exit Select
                Case "Google Spreadsheets (Public)"
                    provider = New GoogleSpreadsheetsDataProvider(TextBoxTableID.Text, CheckBoxFirstRowAreColumnNames.Checked)
                    Exit Select
                Case "Google Spreadsheets (Private)"
                    provider = New GoogleSpreadsheetsDataProvider(TextBoxTableID.Text, CheckBoxFirstRowAreColumnNames.Checked, TextBoxRefreshToken.Text, TextBoxClientID.Text, TextBoxClientSecret.Text)
                    Exit Select
            End Select
        Catch LlException As ListLabelException
            'D: Exception abfangen
            'US: Catch Exceptions
            MessageBox.Show("Information: " + LlException.Message + vbLf & vbLf & "This information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
        End Try
        Return provider
    End Function

    Private Function IsAllInputGivenForDataProvider() As Boolean
        For Each item As Control In FlowLayoutPanel1.Controls
            If item.Equals(TextBoxObjects) Then
                Continue For
            End If
            If TypeOf item Is MetroFramework.Controls.MetroTextBox AndAlso item.Visible = True Then
                If [String].IsNullOrWhiteSpace(item.Text) Then
                    Return False
                End If
            End If
        Next
        Return True
    End Function
    Private Sub ResetControlsInFlowLayoutPanel()
        While FlowLayoutPanel1.Controls.Count > 0
            FlowLayoutPanel1.Controls.RemoveAt(0)
        End While
        TextBoxAddress.Text = ""
        TextBoxPort.Text = ""
    End Sub

    Private Sub ComboBoxDataProvider_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBoxDataProvider.SelectedIndexChanged
        If True Then
            Dim selectedItem As String = TryCast(ComboBoxDataProvider.SelectedItem, String)
            ResetControlsInFlowLayoutPanel()
            ' D: Alle benötigten Eingabefelder hinzufügen
            'US: Add all needed input boxes
            Select Case selectedItem
                Case "Cassandra"
                    FlowLayoutPanel1.Controls.Add(LabelAddress)
                    FlowLayoutPanel1.Controls.Add(TextBoxAddress)
                    TextBoxAddress.Text = ""

                    FlowLayoutPanel1.Controls.Add(LabelKeyspace)
                    FlowLayoutPanel1.Controls.Add(TextBoxKeySpace)
                    TextBoxKeySpace.Text = ""
                    Exit Select

                Case "MongoDB"
                    FlowLayoutPanel1.Controls.Add(LabelAddress)
                    FlowLayoutPanel1.Controls.Add(TextBoxAddress)
                    TextBoxAddress.Text = ""

                    FlowLayoutPanel1.Controls.Add(LabelUserName)
                    FlowLayoutPanel1.Controls.Add(TextBoxUsername)
                    TextBoxUsername.Text = ""

                    FlowLayoutPanel1.Controls.Add(LabelPassword)
                    FlowLayoutPanel1.Controls.Add(TextBoxPassword)
                    TextBoxPassword.Text = ""

                    FlowLayoutPanel1.Controls.Add(LabelDBName)
                    FlowLayoutPanel1.Controls.Add(TextBoxDBName)
                    TextBoxDBName.Text = ""

                    FlowLayoutPanel1.Controls.Add(LabelPort)
                    FlowLayoutPanel1.Controls.Add(TextBoxPort)
                    TextBoxPort.Text = "27017"
                    Exit Select

                Case "Salesforce"
                    FlowLayoutPanel1.Controls.Add(LabelAddress)
                    FlowLayoutPanel1.Controls.Add(TextBoxAddress)
                    TextBoxAddress.Text = "https://login.salesforce.com/services/oauth2/token"

                    FlowLayoutPanel1.Controls.Add(LabelUserName)
                    FlowLayoutPanel1.Controls.Add(TextBoxUsername)
                    TextBoxUsername.Text = ""

                    FlowLayoutPanel1.Controls.Add(LabelPassword)
                    FlowLayoutPanel1.Controls.Add(TextBoxPassword)
                    TextBoxPassword.Text = ""

                    FlowLayoutPanel1.Controls.Add(LabelObjects)
                    FlowLayoutPanel1.Controls.Add(TextBoxObjects)
                    TextBoxObjects.Text = ""
                    Exit Select

                Case "SharePoint"
                    FlowLayoutPanel1.Controls.Add(LabelAddress)
                    FlowLayoutPanel1.Controls.Add(TextBoxAddress)
                    TextBoxAddress.Text = ""

                    FlowLayoutPanel1.Controls.Add(LabelUserName)
                    FlowLayoutPanel1.Controls.Add(TextBoxUsername)
                    TextBoxUsername.Text = ""

                    FlowLayoutPanel1.Controls.Add(LabelPassword)
                    FlowLayoutPanel1.Controls.Add(TextBoxPassword)
                    TextBoxPassword.Text = ""

                    FlowLayoutPanel1.Controls.Add(LabelDomain)
                    FlowLayoutPanel1.Controls.Add(TextBoxDomain)
                    TextBoxDomain.Text = ""
                    Exit Select

                Case "Google Spreadsheets (Public)"
                    FlowLayoutPanel1.Controls.Add(LabelTableID)
                    FlowLayoutPanel1.Controls.Add(TextBoxTableID)
                    TextBoxTableID.Text = ""

                    FlowLayoutPanel1.Controls.Add(CheckBoxFirstRowAreColumnNames)
                    Exit Select

                Case "Google Spreadsheets (Private)"
                    FlowLayoutPanel1.Controls.Add(LabelTableID)
                    FlowLayoutPanel1.Controls.Add(TextBoxTableID)
                    TextBoxTableID.Text = ""

                    FlowLayoutPanel1.Controls.Add(CheckBoxFirstRowAreColumnNames)

                    FlowLayoutPanel1.Controls.Add(LabelRefreshToken)
                    FlowLayoutPanel1.Controls.Add(TextBoxRefreshToken)
                    TextBoxRefreshToken.Text = ""

                    FlowLayoutPanel1.Controls.Add(LabelClientID)
                    FlowLayoutPanel1.Controls.Add(TextBoxClientID)
                    TextBoxClientID.Text = ""

                    FlowLayoutPanel1.Controls.Add(LabelClientSecret)
                    FlowLayoutPanel1.Controls.Add(TextBoxClientSecret)
                    TextBoxClientSecret.Text = ""
                    Exit Select
            End Select
            ButtonNextTabpage1.Enabled = False
        End If
    End Sub

    Private Sub ButtonDataProviderTest_Click(sender As Object, e As EventArgs) Handles buttonDataProviderTest.Click
        If IsAllInputGivenForDataProvider() Then
            Dim passedTest As Boolean = False
            Dim selectedDataProvider As String = TryCast(ComboBoxDataProvider.SelectedItem, String)

            Cursor.Current = Cursors.WaitCursor
            Try
                _dataProvider = CreateDataProvider(selectedDataProvider)
                _dataProviderTables = _dataProvider.Tables

                If _dataProviderTables.Count > 0 Then
                    passedTest = True
                Else
                    MessageBox.Show("The data provider returned 0 tables.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
                End If
            Catch LlException As ListLabelException
                'D: Exception abfangen
                'US: Catch exceptions
                MessageBox.Show("Information: " + LlException.Message + vbLf & vbLf & "This information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
            Catch f As Exception
                MessageBox.Show("The data provider could not be created successfully:" & vbLf + f.Message, "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
            End Try

            Cursor.Current = Cursors.[Default]

            If passedTest Then
                InitTabpage2()
                ButtonNextTabpage1.Enabled = True
                _hasPassedTest = True
                MessageBox.Show("The data provider was successfully created.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
            Else
                _dataProvider = Nothing
                _dataProviderTables = Nothing
            End If
        Else
            MessageBox.Show("Please fill out the input boxes.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
        End If
    End Sub

#End Region
#Region "Project Settings Tabview"
    Private Sub InitTabpage2()
        'D: Alle Felder aus der Liste löschen
        'US: Clear all fields from the list
        ListBoxAvailableFields.Items.Clear()
        ListBoxSelectedFields.Items.Clear()
        TextBoxLogo.Text = Path.Combine(Directory.GetCurrentDirectory(), "sunshine.gif")
        InitComboBoxTable()
    End Sub

    Private Sub InitComboBoxTable()
        If _dataProvider IsNot Nothing Then
            ComboBoxTable.Items.Clear()
            'D: Alle verfügbaren Tabellen in das Control schreiben
            'US: Add all available tables to the control
            For Each table In _dataProviderTables
                ComboBoxTable.Items.Add(CleanUpString(table.TableName))
            Next
        End If
        'D: Ersten Eintrag selektieren
        'US: Select first entry
        ComboBoxTable.SelectedIndex = 0
    End Sub
    Private Sub DesignProject_Click(sender As Object, e As EventArgs) Handles ButtonDesign.Click
        Try
            'D: Den Datenprovider setzen
            'US: Set the data provider
            LL.DataSource = _dataProvider
            'D: List & Label Projekt anhand Einstellungen erstellen
            'US: Create List & Label project based on the settings
            GenerateLLProject()
            'D: Designer aufrufen
            'US: Call the designer
            LL.Design(LlProject.List, Path.Combine(Application.StartupPath, "dynamic.lst"))
        Catch LlException As ListLabelException
            'D: Exception abfangen
            'US: Catch exceptions
            MessageBox.Show("Information: " + LlException.Message + vbLf & vbLf & "This information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
        End Try
    End Sub

    Private Sub PrintProject_Click(sender As Object, e As EventArgs) Handles ButtonPreview.Click
        Try
            'D: Den Datenprovider setzen
            'US: Set the data provider
            LL.DataSource = _dataProvider

            'D: List & Label Projekt anhand Einstellungen erstellen
            'US: Create List & Label project based on the settings
            GenerateLLProject()

            'D: Drucken
            'US: Print
            LL.Print(LlProject.List, Path.Combine(Application.StartupPath, "dynamic.lst"))
        Catch LlException As ListLabelException
            'D: Exception abfangen
            'US: Catch exceptions
            MessageBox.Show("Information: " + LlException.Message + vbLf & vbLf & "This information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
        End Try
    End Sub


    'D: Hinweis: Beim Verwenden der List & Label DOM Klassen ist zu beachten, dass die einzelnen Eigenschaftswerte als Zeichenkette angegeben werden           
    '	   müssen. Dies ist notwendig, um ein Höchstmaß an Flexibilität zu gewährleisten, da somit auch List & Label Formeln erlaubt sind.

    'US: Hint: When using List & Label DOM classes, please note that the property values have to be passed as strings. This is neccessary to ensure a
    '		 maximum of flexibility - this way, List & Label formulas can be used as property values.

    Private Sub GenerateLLProject()
        Try
            'D: Neues DOM-Projekt vom Typ LlProject.List erzeugen
            'US: Create new DOM project of type LlProject.List
            Using proj As New ProjectList(LL)
                'D: Dateinamen und Dateizugriffsoptionen setzen
                'US: Set file name and file access options
                proj.Open(Path.Combine(Application.StartupPath, "dynamic.lst"), LlDomFileMode.Create, LlDomAccessMode.ReadWrite)
                'D: Standardschrift und -größe setzen
                'US: Set default font and size
                proj.Settings.DefaultFont.FaceName = """Calibri"""
                proj.Settings.DefaultFont.Size = "12"
                'D: Designschema setzen
                'US: Set design scheme
                proj.ProjectParameters("LL.DesignScheme").Contents = """COMBITBLUE"""
                'D: Eine neue Projektbeschreibung zuweisen
                'US: Assign new project description
                proj.ProjectParameters("LL.ProjectDescription").Contents = TextBoxTitle.Text
                'D: Ein leeres Text-Objekt erstellen
                'US: Create an empty text object
                Dim llobjText As New ObjectText(proj.Objects)
                'D: Auslesen der Seitenkoordinaten der ersten Seite
                'US: Get the coordinates for the first page
                Dim pageExtend As Size = proj.Regions(0).Paper.Extent.[Get]()
                'D: Setzen von Eigenschaften für das Text-Objekt. Alle Einheiten sind SCM (1/1000 mm).
                'US: Set some properties for the text object. All units are SCM (1/1000 mm).
                llobjText.Position.[Set](10000, 10000, pageExtend.Width - 65000, 27000)
                'D: Hinzufügen eines Absatzes und setzen diverser Eigenschaften
                'US: Add a paragraph to the text object and set some properties
                Dim llobjParagraph As New Paragraph(llobjText.Paragraphs)
                llobjParagraph.Contents = String.Format("""{0}""", TextBoxTitle.Text)
                llobjParagraph.Font.Bold = "True"
                'D: Hinzufügen eines Grafikobjekts
                'US: Add a drawing object
                Dim llobjPic As New ObjectDrawing(proj.Objects)
                llobjPic.Source.FileInfo.FileName = TextBoxLogo.Text
                llobjPic.Position.[Set](pageExtend.Width - 50000, 10000, pageExtend.Width - (pageExtend.Width - 40000), 27000)
                'D: Hinzufügen eines Tabellencontainers und setzen diverser Eigenschaften
                'US: Add a table container and set some properties
                Dim container As New ObjectReportContainer(proj.Objects)
                container.Position.[Set](10000, 40000, pageExtend.Width - 20000, pageExtend.Height - 44000)
                'D: In dem Tabellencontainer eine Tabelle hinzufügen
                'US: Add a table into the table container
                Dim table As New SubItemTable(container.SubItems)
                'D: Gewünschte Tabelle als Datenquelle setzen
                'US: Set required source table
                table.TableId = ComboBoxTable.Text
                'D: Zebramuster für Tabelle definieren
                'US: Define zebra pattern for table
                table.LineOptions.Data.ZebraPattern.Style = "1"
                table.LineOptions.Data.ZebraPattern.Pattern = "1"
                table.LineOptions.Data.ZebraPattern.Color = "LL.Scheme.BackgroundColor0"
                'D: Eine neue Datenzeile hinzufügen mit allen ausgewählten Feldern
                'US: Add a new data line including all selected fields
                Dim tableLineData As New TableLineData(table.Lines.Data)
                Dim tableLineHeader As New TableLineHeader(table.Lines.Header)
                For Each fieldName As String In ListBoxSelectedFields.Items
                    Dim fieldWidth As String = (Convert.ToInt32(container.Position.Width) / ListBoxSelectedFields.Items.Count).ToString()
                    'D: Kopfzeile definieren
                    'US: Define header line
                    Dim header As New TableFieldText(tableLineHeader.Fields)
                    header.Contents = String.Format("""{0}""", fieldName)
                    header.Filling.Style = "1"
                    header.Filling.Color = "LL.Scheme.BackgroundColor2"
                    header.Font.Bold = "True"
                    header.Font.Color = "LL.Color.White"
                    header.Width = fieldWidth
                    'D: Datenzeile definieren
                    'US: Define data line
                    Dim tableField As New TableFieldText(tableLineData.Fields)
                    tableField.Contents = Convert.ToString(ComboBoxTable.Text + ".") & fieldName
                    tableField.Width = fieldWidth
                    tableField.Filling.Pattern = "0"
                Next
                'D: Projekt speichern
                'US: Save project
                proj.Save()
            End Using
        Catch LlException As ListLabelException
            'D: Exception abfangen
            'US: Catch exceptions
            MessageBox.Show("Information: " + LlException.Message + vbLf & vbLf & "This information was generated by a List & Label custom exception.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
        End Try
    End Sub

    Private Sub ComboBoxTable_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBoxTable.SelectedIndexChanged
        'D: Alle Felder aus der Liste löschen
        'US: Clear all fields from the list
        ListBoxAvailableFields.Items.Clear()
        ListBoxSelectedFields.Items.Clear()
        'D: Alle verfügbaren Felder in die ListBox einfügen
        'US: Add all available fields into the listbox
        For Each row In _dataProviderTables(ComboBoxTable.SelectedIndex).Rows
            For Each column In row.Columns
                ListBoxAvailableFields.Items.Add(CleanUpString(column.ColumnName))
            Next
            Exit For
        Next
    End Sub

    Private Sub SelectField_Click(sender As Object, e As EventArgs) Handles buttonToSelectedFields.Click, buttonToAvailableFields.Click
        If sender.Equals(buttonToSelectedFields) Then
            While ListBoxAvailableFields.SelectedItems.Count > 0
                ListBoxSelectedFields.Items.Add(ListBoxAvailableFields.SelectedItems(0))
                ListBoxAvailableFields.Items.Remove(ListBoxAvailableFields.SelectedItems(0))
            End While
        ElseIf sender.Equals(buttonToAvailableFields) Then
            While ListBoxSelectedFields.SelectedItems.Count > 0
                ListBoxAvailableFields.Items.Add(ListBoxSelectedFields.SelectedItems(0))
                ListBoxSelectedFields.Items.Remove(ListBoxSelectedFields.SelectedItems(0))
            End While
        End If
    End Sub

    Private Sub ButtonLogo_Click(sender As Object, e As EventArgs) Handles ButtonLogo.Click
        OpenFileDialog1.FileName = TextBoxLogo.Text
        If OpenFileDialog1.ShowDialog() = DialogResult.OK Then
            TextBoxLogo.Text = OpenFileDialog1.FileName
        End If
    End Sub

    Private Sub ListBoxAvailableFields_MouseDoubleClick(sender As Object, e As MouseEventArgs) Handles ListBoxAvailableFields.MouseDoubleClick
        Dim index As Integer = ListBoxAvailableFields.IndexFromPoint(e.Location)
        If index <> ListBox.NoMatches Then
            buttonToSelectedFields.PerformClick()
        End If
    End Sub

    Private Sub ListBoxSelectedFields_MouseDoubleClick(sender As Object, e As MouseEventArgs) Handles ListBoxSelectedFields.MouseDoubleClick
        Dim index As Integer = ListBoxSelectedFields.IndexFromPoint(e.Location)
        If index <> ListBox.NoMatches Then
            buttonToAvailableFields.PerformClick()
        End If
    End Sub

    Private Sub ListBoxAvailableFields_DrawItem(sender As Object, e As DrawItemEventArgs) Handles ListBoxAvailableFields.DrawItem
        ChangeListBoxHighlightColor(ListBoxAvailableFields, e)
    End Sub

    Private Sub ListBoxSelectedFields_DrawItem(sender As Object, e As DrawItemEventArgs) Handles ListBoxSelectedFields.DrawItem
        ChangeListBoxHighlightColor(ListBoxSelectedFields, e)
    End Sub

    Private Sub ChangeListBoxHighlightColor(listBox As ListBox, e As DrawItemEventArgs)
        If e.Index < 0 Then
            Return
        End If
        If (e.State And DrawItemState.Selected) = DrawItemState.Selected Then
            e = New DrawItemEventArgs(e.Graphics, e.Font, e.Bounds, e.Index, e.State Xor DrawItemState.Selected, e.ForeColor,
                Color.FromArgb(0, 174, 219))
        End If
        e.DrawBackground()
        e.Graphics.DrawString(listBox.Items(e.Index).ToString(), e.Font, Brushes.Black, e.Bounds, StringFormat.GenericDefault)
        e.DrawFocusRectangle()
    End Sub

    Private Function CleanUpString(input As String) As String

        Dim regex As New Regex("[\s+-.,!@#$%^&*();\/|<>""']")
        Return regex.Replace(input, "_")

    End Function
#End Region
End Class

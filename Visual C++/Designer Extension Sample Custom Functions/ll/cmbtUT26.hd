/**** C/C++ Defines Only constants and function definitions for UT26.DLL ****/
/****  (c) combit GmbH ****/
/****  [build of 2019-11-14 15:11:01] ****/

#ifndef _UT26_H
#define _UT26_H
#define _UT26_HX


#ifndef EXPLICIT_TYPES
  #define EXPLICIT_TYPES
  #ifndef INT
    typedef int INT; /* you should comment this out if you have any problems with INT */
  #endif
  #ifndef CHAR
    typedef char CHAR; /* you should comment this out if you have any problems with CHAR */
  #endif
  typedef unsigned char UINT8;
  typedef unsigned short UINT16;
  typedef signed char INT8;
  typedef signed short INT16;
  #ifndef _BASETSD_H_ /* MSVC6 defines these itself in basetsd.h */
    typedef unsigned long UINT32;
    typedef signed long INT32;
  #endif
#endif

#ifndef DLLPROC
  #define DLLPROC WINAPI
#endif
#ifndef DLLCPROC
  #define DLLCPROC WINAPI
#endif


#ifndef CMBTLANG_DEFAULT
 #define CMBTLANG_DEFAULT    -1
 #define CMBTLANG_GERMAN      0
 #define CMBTLANG_ENGLISH     1
 #define CMBTLANG_ARABIC      2
 #define CMBTLANG_AFRIKAANS   3
 #define CMBTLANG_ALBANIAN    4
 #define CMBTLANG_BASQUE      5
 #define CMBTLANG_BULGARIAN   6
 #define CMBTLANG_BYELORUSSIAN 7
 #define CMBTLANG_CATALAN     8
 #define CMBTLANG_CHINESE     9
 #define CMBTLANG_CROATIAN    10
 #define CMBTLANG_CZECH       11
 #define CMBTLANG_DANISH      12
 #define CMBTLANG_DUTCH       13
 #define CMBTLANG_ESTONIAN    14
 #define CMBTLANG_FAEROESE    15
 #define CMBTLANG_FARSI       16
 #define CMBTLANG_FINNISH     17
 #define CMBTLANG_FRENCH      18
 #define CMBTLANG_GREEK       19
 #define CMBTLANG_HEBREW      20
 #define CMBTLANG_HUNGARIAN   21
 #define CMBTLANG_ICELANDIC   22
 #define CMBTLANG_INDONESIAN  23
 #define CMBTLANG_ITALIAN     24
 #define CMBTLANG_JAPANESE    25
 #define CMBTLANG_KOREAN      26
 #define CMBTLANG_LATVIAN     27
 #define CMBTLANG_LITHUANIAN  28
 #define CMBTLANG_NORWEGIAN   29
 #define CMBTLANG_POLISH      30
 #define CMBTLANG_PORTUGUESE  31
 #define CMBTLANG_ROMANIAN    32
 #define CMBTLANG_RUSSIAN     33
 #define CMBTLANG_SLOVAK      34
 #define CMBTLANG_SLOVENIAN   35
 #define CMBTLANG_SERBIAN     36
 #define CMBTLANG_SPANISH     37
 #define CMBTLANG_SWEDISH     38
 #define CMBTLANG_THAI        39
 #define CMBTLANG_TURKISH     40
 #define CMBTLANG_UKRAINIAN   41
 #define CMBTLANG_SERBIAN_LATIN 42
 #define CMBTLANG_CHINESE_TRADITIONAL   48
 #define CMBTLANG_PORTUGUESE_BRAZILIAN   	129
 #define CMBTLANG_SPANISH_COLOMBIA  		130
 #define CMBTLANG_UNSPECIFIED	255
#endif


/*--- type declarations ---*/

#ifndef LPCVOID
  #define LPCVOID                        const LPVOID
#endif
#ifndef LPLPVOID
  #define LPLPVOID                       LPVOID FAR *
#endif
#ifndef LPHWND
  #define LPHWND                         HWND FAR *
#endif
#ifndef LPINT
  #define LPINT                          INT FAR *
#endif
#ifndef LPBOOL
  #define LPBOOL                         BOOL FAR *
#endif
#ifndef LPHGLOBAL
  #define LPHGLOBAL                      HGLOBAL FAR *
#endif
#ifndef LPCSTR
  #define LPCSTR                         const CHAR FAR *
#endif
#ifndef LPDWORD
  #define LPDWORD                        DWORD FAR *
#endif
#ifndef HUTILGPFHANDLER
  #define HUTILGPFHANDLER                LPVOID
#endif
#ifndef _PVARIANT
  #define _PVARIANT                      VARIANT FAR *
#endif
#ifndef _PCVARIANT
  #define _PCVARIANT                     const VARIANT FAR *
#endif
#ifndef PINT
  #define PINT                           INT FAR *
#endif
#ifndef PCCONTEXT
  #define PCCONTEXT                      const CONTEXT FAR *
#endif
#ifndef PEXCEPTION_POINTERS
  #define PEXCEPTION_POINTERS            EXCEPTION_POINTERS FAR *
#endif
#ifndef PIDBGStackTraceList
  #define PIDBGStackTraceList            IDBGStackTraceList FAR *
#endif
#ifndef PPIDBGStackTraceList
  #define PPIDBGStackTraceList           IDBGStackTraceList FAR * FAR *
#endif
#ifndef PIDBGModuleList
  #define PIDBGModuleList                IDBGModuleList FAR *
#endif
#ifndef PPIDBGModuleList
  #define PPIDBGModuleList               IDBGModuleList FAR * FAR *
#endif
#ifndef _PUINT8
  #define _PUINT8                        UINT8 FAR *
#endif
#ifndef _PCUINT8
  #define _PCUINT8                       const UINT8 FAR *
#endif
#ifndef HPROFJOB
  #define HPROFJOB                       HANDLE
#endif
#ifndef HPROFLIST
  #define HPROFLIST                      LPVOID
#endif
#ifndef LPCOLORREF
  #define LPCOLORREF                     COLORREF FAR *
#endif
#ifndef LPINT64
  #define LPINT64                        INT64 FAR *
#endif
#ifndef LPRECT
  #define LPRECT                         RECT FAR *
#endif
#ifndef LPPOINT
  #define LPPOINT                        POINT FAR *
#endif
#ifndef PIStream
  #define PIStream                       IStream FAR *
#endif
#ifndef LPDOUBLE
  #define LPDOUBLE                       double FAR *
#endif
#ifndef PCRITICAL_SECTION
  #define PCRITICAL_SECTION              CRITICAL_SECTION FAR *
#endif
#ifndef PPCRITICAL_SECTION
  #define PPCRITICAL_SECTION             CRITICAL_SECTION FAR * FAR *
#endif
#ifndef PINtfyGlobalOptionChange
  #define PINtfyGlobalOptionChange       INtfyGlobalOptionChange FAR *
#endif
#ifndef PIUTProfRecurse
  #define PIUTProfRecurse                IUTProfRecurse FAR *
#endif

/*--- constant declarations ---*/

#define UTIL_VERSION_NUMBER            (0                   )
#define UTIL_VERSION_MAJOR             (1                   )
#define UTIL_VERSION_MINOR             (2                   )
#define UTIL_VERSION_DEBUG             (3                   )
#define UTIL_JOB_DEBUG                 (0x80000000          ) /* MODULE FLAG: print call info of this module */
#define UTIL_HEAP_DEBUG                (0x40000000          ) /* MODULE FLAG: debug heap of this module */
#define UTIL_MEM_ZEROINIT              (0x00000001          )
#define UTIL_MEM_DEBUGINIT             (0x00000002          )
#define UTIL_MEM_NOTRACE               (0x00000004          )
#define UTIL_HEAP_NOINTELLIGENCE       (0x00000008          ) /* no size memorizing, please! */
#define UTIL_HEAP_NOSERIALIZE          (0x00000010          )
#define UTIL_HEAP_GENERATEEXCEPTIONS   (0x00000020          )
#define UTIL_HEAP_NODEBUG              (0x00000040          ) /* HEAP FLAG: don't debug this heap (when UTIL_HEAP_DEBUG as modeule flag given) */
#define UTIL_HEAP_CHKALLOC             (0x00000080          ) /* use internal allocator... */
#define UTIL_HEAP_NO_REPORTING_OF_LOST_OBJECTS (0x00000100          )
#define UTIL_OK                        (0                   )
#define UTIL_ERR_NOMEM                 (-1                  )
#define UTIL_ERR_INVALIDHANDLE         (-2                  )
#define UTIL_ERR_HEAPCORRUPTED         (-3                  )
#define UTIL_ERR_MEMOVERWRITE          (-4                  )
#define UTIL_ERR_REMAININGOBJECTS      (-5                  )
#define UTIL_ERR_BADPOINTER            (-6                  )
#define UTIL_ERR_BADOS                 (-7                  ) /* some functions need NT 3.51 */
#define UTIL_FLAG_DEBWIN               (0x00000001          )
#define UTIL_SIA_USER_ABORTED          (-1                  )
#define UTIL_SIA_BAD_OS                (-2                  )
#define UTIL_SIA_ERR_BADLOGON          (-3                  )
#define UTIL_SIA_ERR_FAIL              (-4                  )
#define UTIL_SIA_ERR_PARAM             (-5                  )
#define UTIL_DEBUGHELP_OPTION_COUNT_OF_TRACES (1                   )
#define UTIL_DEBUGHELP_OPTION_SHOW_WAITDIALOG (2                   )
#define UTIL_DEBUGHELP_OPTION_WAIT_TIMEOUT_SECS (3                   )
#define UT_ZIP_ERR_FILE_NOT_FOUND      (-1                  )
#define UT_ZIP_ERR_FILE_CREATION       (-2                  )
#define UT_ZIP_ERR_FILE_WRITE          (-3                  )
#define UT_DATETIMEFROMLOCALESTRING_FLAG_NEUTRAL (0x00                )
#define UT_DATETIMEFROMLOCALESTRING_FLAG_ADD_CENTURY (0x01                ) /* does not do anything any more... 2-digits are always autocorrected */
#define UT_DATETIMEFROMLOCALESTRING_FLAG_NO_AUTOFILL (0x02                )
#define UT_DATETIMEFROMLOCALESTRING_FLAG_NO_AUTOFILL_NOERROR (0x04                ) /* not set -> unknown values = 35535 */
#define UT_DATETIMEFROMLOCALESTRING_FLAG_TIMEONLYSUPPORT (0x08                )
#define UT_DATETIMEFROMLOCALESTRING_FLAG_SET_UNDEFINED_TIME_VALUES_TO_65535 (0x10                ) /* set -> unknown values = 65535 */
#define PROF_VERSION_NUMBER            (0                   )
#define PROF_VERSION_MAJOR             (1                   )
#define PROF_VERSION_MINOR             (2                   )
#define PROF_FORMAT_PROF               (0                   )
#define PROF_FORMAT_XML                (1                   )
#define PROF_FORMAT_XFDF               (2                   )
#define PROF_FORMAT_TYPEMASK           (0x0f                )
#define PROF_FORMAT_OPT_COMPRESSED     (0x80                )
#define PROF_FORMAT_FORCE_COMPRESSED   (0x40                )
#define PROF_ERR_OPEN_READ             (-1                  )
#define PROF_ERR_READ                  (-2                  )
#define PROF_ERR_OPEN_WRITE            (-3                  )
#define PROF_ERR_WRITE                 (-4                  )
#define PROF_ERR_BADJOB                (-5                  )
#define PROF_ERR_NOKEY                 (-6                  )
#define PROF_ERR_BADLIST               (-7                  )
#define PROF_ERR_MEMORY                (-8                  )
#define PROF_ERR_BADVALUE              (-9                  )
#define PROF_ERR_SHARING               (-10                 )
#define UT_ZIP_FLAG_RECURSIVE          (0x00000001          )
#define UT_HANDLELISTMGR_CHECK         (0                   )
#define UT_HANDLELISTMGR_ADD           (1                   )
#define UT_HANDLELISTMGR_REMOVE        (2                   )
#define UT_HANDLELISTMGR_ENTRYCOUNT    (3                   )
#define UT_HANDLELISTMGR_CONTAINS      (4                   )
#define UT_HANDLELISTMGR_PUSH          (10                  )
#define UT_HANDLELISTMGR_COMPARE       (11                  )
#define UT_TEMPFILEMGR_FLG_SKIPCHECK_EXIST (0x01                ) /* allow adding of non-existant files (skip assert) */
#define UT_TEMPFILEMGR_FLG_SKIPCHECK_DUPLICATE (0x02                ) /* allow adding of duplicate entires (skip assert, but will not be added twice) */
#define UT_TEMPFILEMGR_FLG_SKIPTHREADCHECK_LASTMODIFIED10 (0x04                ) /* deactivate autodelete after 10s of file inactivity.   */
#define UT_TEMPFILENAME_DEFAULT        (0x0000              ) /* must be identical to LL (i.e. LL must use the same flags!) */
#define UT_TEMPFILENAME_ENSURELONGPATH (0x0001              ) /* must be identical to LL (i.e. LL must use the same flags!) */
#define PROF_OPTION_CLEAR_THREAD_DATA  (0                   )
#define PROF_OPTION_PASSWORD           (1                   )

/*--- function declaration ---*/

#if !defined(_RC_INVOKED_) && !defined(RC_INVOKED)

#if defined(_WIN64)
#  pragma pack(push,8)
# else // _WIN64
#  if __WATCOMC__ > 1000 || _MSC_VER >= 1400 /* Watcom C++ >= 10.x or MSC >= 2005 */
#    pragma pack(push,4)
#   elif __BORLANDC__ /* Borland C++ */
#    pragma option -a4
#   else
#    pragma pack(4) /* MS, Watcom <= 10.0, ... */
#  endif
#endif

#ifdef IMPLEMENTATION
  static HINSTANCE g_hDLLUT26 = NULL;
  static INT       g_nDLLUT26Counter = 0;
#endif


 #ifndef IMPLEMENTATION
 #ifndef UTIL_ENV_UNKNOWN
   #define UTIL_ENV_UNKNOWN     0x00000000
   #define UTIL_ENV_WIN3X       0x00000001
   #define UTIL_ENV_WFW         0x00000004
   #define UTIL_ENV_WIN32S      0x00000008
   #define UTIL_ENV_WIN32C      0x00000010
   #define UTIL_ENV_WINNT       0x00000020
   #define UTIL_ENV_WINNTAS     0x00000040
 #endif
 #endif
 #ifndef IMPLEMENTATION
 typedef struct
   {
       UINT    _nSize;             // please do initialize before call!
       UINT    _nMaxPath;          // max path length
       UINT    _nMaxDrive;         // max length of drive string (usually 2+1)
       UINT    _nMaxComponent;     // max length of single component in path (...\<component>\...)
       UINT32  _nFlags;            // see below
   } scFSInfo30, FAR* PFSINFO30;
 #define   UTIL_FSINFO_CASESENS        0x00000001  // file names are case sensitive!
 #define UTIL_FSINFO_CASEPRESERVE  0x00000002  // preserves case in directories
 #define UTIL_FSINFO_UNICODE           0x00000004  // file names are written in Unicode
 #define UTIL_FSINFO_LONGNAMES     0x00000008  // long names supported
 #define   UTIL_FSINFO_VOLCOMPRESSED   0x00000010  // volume is compressed
 #endif
 #ifndef IMPLEMENTATION
  interface IDBGStackTraceList;
  interface IDBGModuleList;
 #endif
  typedef BOOL        (WINAPI *LPFNPROFENUMA)(HPROFJOB hJob, LPCSTR pszName, LPCSTR pszContents, HPROFLIST hList, LPVOID pVoid);
  typedef BOOL        (WINAPI *LPFNPROFENUMW)(HPROFJOB hJob, LPCWSTR pszName, LPCWSTR pszContents, HPROFLIST hList, LPVOID pVoid);
 #if !defined(IMPLEMENTATION)
 enum enEnvironmentType
  {
  ENVTYPE_UNKNOWN,
  ENVTYPE_STANDARD,
  ENVTYPE_SERVICE_WITH_INTERACTION,
  ENVTYPE_SERVICE_WITHOUT_INTERACTION,
  ENVTYPE_IIS_ASP,
  };
 #endif
 #ifndef IMPLEMENTATION
 #if defined(__cplusplus) && !defined(DEFINED_INtfyGlobalOptionChange)
 #define DEFINED_INtfyGlobalOptionChange
 interface INtfyGlobalOptionChange
  {
   STDMETHOD(OnChange)(LPCWSTR pszKey, const VARIANT* pvValue) = 0;
  };
 #endif
 #endif
 #ifndef IMPLEMENTATION
 #if defined(__cplusplus) && defined(__CTRLRESVER__) && defined(__CLSVARIANT_HPP__)
 extern "C"
 {
 DECLSPEC_IMPORT INT      WINAPI  UtilGlobalOptionGet(LPCWSTR pszKey, _PVARIANT pvValue, _PCVARIANT pvValueDefault);
 }
 inline clsVariant UtilGlobalOptionGet(LPCWSTR pszKey, const VARIANT* pvDefault = nullptr)
  {
  clsVariant  v;
  
  UtilGlobalOptionGet(pszKey, v, pvDefault);
  
  return(v);
  };
 
 #endif
 #endif
 #ifndef IMPLEMENTATION
 #ifdef __cplusplus
 
 interface IUTProfRecurse
  {
   STDMETHOD(OnEnter)(HPROFLIST hList, LPCWSTR pszListName) = 0; // S_OK -> enter, S_FALSE -> skip, E_FAIL -> end iteration
   STDMETHOD_(void,OnExit)(HPROFLIST hList, LPCWSTR pszListName) = 0;
   STDMETHOD(OnItem(HPROFLIST hListContainer, LPCWSTR pszKey, LPCWSTR pszValue, BSTR* pbsNewKey, BSTR* pbsNewValue)) = 0;
  };
 
 #endif
 #endif
 #ifndef IMPLEMENTATION
 #ifdef __cplusplus
 
 interface DECLSPEC_UUID("AF30BC32-B752-4D5E-BFE0-FE3527F762F8") IUTLoadResourceHook
  : public IUnknown
  {
  STDMETHOD (OnLoadString)(HINSTANCE hInstance, LANGID nLangID, INT nID, VARIANT* pvResult) = 0;
  STDMETHOD (OnLoadResource)(HINSTANCE hInstance, LANGID nLangID, const VARIANT* pvName, const VARIANT* pvType, VARIANT* pvResult) = 0;
   };
 #endif
 #endif


#if __WATCOMC__ > 1000 || _MSC_VER >= 1400 /* Watcom C++ >= 10.x or MSC >= 2005 */
#pragma pack(pop)
#elif __BORLANDC__ /* Borland C++ */
#pragma option -a.
#else
#pragma pack() /* others */
#endif

#endif  /* #ifndef _RC_INVOKED_ */

#endif  /* #ifndef _UT26_H */


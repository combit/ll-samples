// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class CPicture;
class COleFont;

/////////////////////////////////////////////////////////////////////////////
// CRichtext wrapper class

class CRichtext : public CWnd
{
protected:
	DECLARE_DYNCREATE(CRichtext)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x3b7c8860, 0xd78f, 0x101b, { 0xb9, 0xb5, 0x4, 0x2, 0x1c, 0x0, 0x94, 0x9 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	OLE_COLOR GetBackColor();
	void SetBackColor(OLE_COLOR);
	BOOL GetEnabled();
	void SetEnabled(BOOL);
	BOOL GetHideSelection();
	void SetHideSelection(BOOL);
	CString GetText();
	void SetText(LPCTSTR);
	BOOL GetMultiLine();
	void SetMultiLine(BOOL);
	long GetScrollBars();
	void SetScrollBars(long);
	long GetSelLength();
	void SetSelLength(long);
	long GetMousePointer();
	void SetMousePointer(long);
	CPicture GetMouseIcon();
	void SetMouseIcon(LPDISPATCH);
	BOOL GetDisableNoScroll();
	void SetDisableNoScroll(BOOL);
	long GetSelStart();
	void SetSelStart(long);
	CString GetSelText();
	void SetSelText(LPCTSTR);
	CString GetTextRTF();
	void SetTextRTF(LPCTSTR);
	CString GetSelRTF();
	void SetSelRTF(LPCTSTR);
	long GetMaxLength();
	void SetMaxLength(long);
	VARIANT GetSelColor();
	void SetSelColor(const VARIANT&);
	VARIANT GetSelFontName();
	void SetSelFontName(const VARIANT&);
	VARIANT GetSelFontSize();
	void SetSelFontSize(const VARIANT&);
	VARIANT GetSelCharOffset();
	void SetSelCharOffset(const VARIANT&);
	VARIANT GetSelIndent();
	void SetSelIndent(const VARIANT&);
	VARIANT GetSelHangingIndent();
	void SetSelHangingIndent(const VARIANT&);
	CString GetFileName();
	void SetFileName(LPCTSTR);
	VARIANT GetSelTabCount();
	void SetSelTabCount(const VARIANT&);
	VARIANT GetSelRightIndent();
	void SetSelRightIndent(const VARIANT&);
	COleFont GetFont();
	void SetFont(LPDISPATCH);
	BOOL GetLocked();
	void SetLocked(BOOL);
	long GetBorderStyle();
	void SetBorderStyle(long);
	VARIANT GetSelBold();
	void SetSelBold(const VARIANT&);
	VARIANT GetSelItalic();
	void SetSelItalic(const VARIANT&);
	VARIANT GetSelStrikethru();
	void SetSelStrikethru(const VARIANT&);
	VARIANT GetSelUnderline();
	void SetSelUnderline(const VARIANT&);
	VARIANT GetSelAlignment();
	void SetSelAlignment(const VARIANT&);
	long GetAppearance();
	void SetAppearance(long);
	OLE_HANDLE GetHWnd();
	void SetHWnd(OLE_HANDLE);
	float GetBulletIndent();
	void SetBulletIndent(float);
	VARIANT GetSelBullet();
	void SetSelBullet(const VARIANT&);
	float GetRightMargin();
	void SetRightMargin(float);

// Operations
public:
	long GetLineFromChar(long CharPos);
	void Refresh();
	long Find(LPCTSTR String, const VARIANT& Start, const VARIANT& End, const VARIANT& Options);
	void Span(LPCTSTR CharacterSet, const VARIANT& Forward, const VARIANT& Negate);
	void UpTo(LPCTSTR CharacterSet, const VARIANT& Forward, const VARIANT& Negate);
	VARIANT GetSelTabs(short Element);
	void SetSelTabs(short Element, const VARIANT& newValue);
	void LoadFile(LPCTSTR FileName, const VARIANT& FileType);
	void SaveFile(LPCTSTR FileName, const VARIANT& FileType);
	void SelPrint(long hDC);
	void AboutBox();
};

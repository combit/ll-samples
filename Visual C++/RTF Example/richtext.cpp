// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "richtext.h"

// Dispatch interfaces referenced by this interface
#include "picture.h"
#include "font.h"

/////////////////////////////////////////////////////////////////////////////
// CRichtext

IMPLEMENT_DYNCREATE(CRichtext, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CRichtext properties

OLE_COLOR CRichtext::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CRichtext::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

BOOL CRichtext::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CRichtext::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

BOOL CRichtext::GetHideSelection()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CRichtext::SetHideSelection(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

CString CRichtext::GetText()
{
	CString result;
	GetProperty(DISPID_TEXT, VT_BSTR, (void*)&result);
	return result;
}

void CRichtext::SetText(LPCTSTR propVal)
{
	SetProperty(DISPID_TEXT, VT_BSTR, propVal);
}

BOOL CRichtext::GetMultiLine()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CRichtext::SetMultiLine(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

long CRichtext::GetScrollBars()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CRichtext::SetScrollBars(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

long CRichtext::GetSelLength()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CRichtext::SetSelLength(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

long CRichtext::GetMousePointer()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CRichtext::SetMousePointer(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

CPicture CRichtext::GetMouseIcon()
{
	LPDISPATCH pDispatch;
	GetProperty(0x6, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CRichtext::SetMouseIcon(LPDISPATCH propVal)
{
	SetProperty(0x6, VT_DISPATCH, propVal);
}

BOOL CRichtext::GetDisableNoScroll()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CRichtext::SetDisableNoScroll(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

long CRichtext::GetSelStart()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CRichtext::SetSelStart(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

CString CRichtext::GetSelText()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CRichtext::SetSelText(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

CString CRichtext::GetTextRTF()
{
	CString result;
	GetProperty(0xa, VT_BSTR, (void*)&result);
	return result;
}

void CRichtext::SetTextRTF(LPCTSTR propVal)
{
	SetProperty(0xa, VT_BSTR, propVal);
}

CString CRichtext::GetSelRTF()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CRichtext::SetSelRTF(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

long CRichtext::GetMaxLength()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CRichtext::SetMaxLength(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

VARIANT CRichtext::GetSelColor()
{
	VARIANT result;
	GetProperty(0xd, VT_VARIANT, (void*)&result);
	return result;
}

void CRichtext::SetSelColor(const VARIANT& propVal)
{
	SetProperty(0xd, VT_VARIANT, &propVal);
}

VARIANT CRichtext::GetSelFontName()
{
	VARIANT result;
	GetProperty(0xe, VT_VARIANT, (void*)&result);
	return result;
}

void CRichtext::SetSelFontName(const VARIANT& propVal)
{
	SetProperty(0xe, VT_VARIANT, &propVal);
}

VARIANT CRichtext::GetSelFontSize()
{
	VARIANT result;
	GetProperty(0xf, VT_VARIANT, (void*)&result);
	return result;
}

void CRichtext::SetSelFontSize(const VARIANT& propVal)
{
	SetProperty(0xf, VT_VARIANT, &propVal);
}

VARIANT CRichtext::GetSelCharOffset()
{
	VARIANT result;
	GetProperty(0x10, VT_VARIANT, (void*)&result);
	return result;
}

void CRichtext::SetSelCharOffset(const VARIANT& propVal)
{
	SetProperty(0x10, VT_VARIANT, &propVal);
}

VARIANT CRichtext::GetSelIndent()
{
	VARIANT result;
	GetProperty(0x11, VT_VARIANT, (void*)&result);
	return result;
}

void CRichtext::SetSelIndent(const VARIANT& propVal)
{
	SetProperty(0x11, VT_VARIANT, &propVal);
}

VARIANT CRichtext::GetSelHangingIndent()
{
	VARIANT result;
	GetProperty(0x12, VT_VARIANT, (void*)&result);
	return result;
}

void CRichtext::SetSelHangingIndent(const VARIANT& propVal)
{
	SetProperty(0x12, VT_VARIANT, &propVal);
}

CString CRichtext::GetFileName()
{
	CString result;
	GetProperty(0x13, VT_BSTR, (void*)&result);
	return result;
}

void CRichtext::SetFileName(LPCTSTR propVal)
{
	SetProperty(0x13, VT_BSTR, propVal);
}

VARIANT CRichtext::GetSelTabCount()
{
	VARIANT result;
	GetProperty(0x14, VT_VARIANT, (void*)&result);
	return result;
}

void CRichtext::SetSelTabCount(const VARIANT& propVal)
{
	SetProperty(0x14, VT_VARIANT, &propVal);
}

VARIANT CRichtext::GetSelRightIndent()
{
	VARIANT result;
	GetProperty(0x15, VT_VARIANT, (void*)&result);
	return result;
}

void CRichtext::SetSelRightIndent(const VARIANT& propVal)
{
	SetProperty(0x15, VT_VARIANT, &propVal);
}

COleFont CRichtext::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CRichtext::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

BOOL CRichtext::GetLocked()
{
	BOOL result;
	GetProperty(0x16, VT_BOOL, (void*)&result);
	return result;
}

void CRichtext::SetLocked(BOOL propVal)
{
	SetProperty(0x16, VT_BOOL, propVal);
}

long CRichtext::GetBorderStyle()
{
	long result;
	GetProperty(0x17, VT_I4, (void*)&result);
	return result;
}

void CRichtext::SetBorderStyle(long propVal)
{
	SetProperty(0x17, VT_I4, propVal);
}

VARIANT CRichtext::GetSelBold()
{
	VARIANT result;
	GetProperty(0x18, VT_VARIANT, (void*)&result);
	return result;
}

void CRichtext::SetSelBold(const VARIANT& propVal)
{
	SetProperty(0x18, VT_VARIANT, &propVal);
}

VARIANT CRichtext::GetSelItalic()
{
	VARIANT result;
	GetProperty(0x19, VT_VARIANT, (void*)&result);
	return result;
}

void CRichtext::SetSelItalic(const VARIANT& propVal)
{
	SetProperty(0x19, VT_VARIANT, &propVal);
}

VARIANT CRichtext::GetSelStrikethru()
{
	VARIANT result;
	GetProperty(0x1a, VT_VARIANT, (void*)&result);
	return result;
}

void CRichtext::SetSelStrikethru(const VARIANT& propVal)
{
	SetProperty(0x1a, VT_VARIANT, &propVal);
}

VARIANT CRichtext::GetSelUnderline()
{
	VARIANT result;
	GetProperty(0x1b, VT_VARIANT, (void*)&result);
	return result;
}

void CRichtext::SetSelUnderline(const VARIANT& propVal)
{
	SetProperty(0x1b, VT_VARIANT, &propVal);
}

VARIANT CRichtext::GetSelAlignment()
{
	VARIANT result;
	GetProperty(0x1c, VT_VARIANT, (void*)&result);
	return result;
}

void CRichtext::SetSelAlignment(const VARIANT& propVal)
{
	SetProperty(0x1c, VT_VARIANT, &propVal);
}

long CRichtext::GetAppearance()
{
	long result;
	GetProperty(0x1d, VT_I4, (void*)&result);
	return result;
}

void CRichtext::SetAppearance(long propVal)
{
	SetProperty(0x1d, VT_I4, propVal);
}

OLE_HANDLE CRichtext::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CRichtext::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

float CRichtext::GetBulletIndent()
{
	float result;
	GetProperty(0x1e, VT_R4, (void*)&result);
	return result;
}

void CRichtext::SetBulletIndent(float propVal)
{
	SetProperty(0x1e, VT_R4, propVal);
}

VARIANT CRichtext::GetSelBullet()
{
	VARIANT result;
	GetProperty(0x1f, VT_VARIANT, (void*)&result);
	return result;
}

void CRichtext::SetSelBullet(const VARIANT& propVal)
{
	SetProperty(0x1f, VT_VARIANT, &propVal);
}

float CRichtext::GetRightMargin()
{
	float result;
	GetProperty(0x20, VT_R4, (void*)&result);
	return result;
}

void CRichtext::SetRightMargin(float propVal)
{
	SetProperty(0x20, VT_R4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CRichtext operations

long CRichtext::GetLineFromChar(long CharPos)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		CharPos);
	return result;
}

void CRichtext::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CRichtext::Find(LPCTSTR String, const VARIANT& Start, const VARIANT& End, const VARIANT& Options)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		String, &Start, &End, &Options);
	return result;
}

void CRichtext::Span(LPCTSTR CharacterSet, const VARIANT& Forward, const VARIANT& Negate)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 CharacterSet, &Forward, &Negate);
}

void CRichtext::UpTo(LPCTSTR CharacterSet, const VARIANT& Forward, const VARIANT& Negate)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 CharacterSet, &Forward, &Negate);
}

VARIANT CRichtext::GetSelTabs(short Element)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Element);
	return result;
}

void CRichtext::SetSelTabs(short Element, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x28, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Element, &newValue);
}

void CRichtext::LoadFile(LPCTSTR FileName, const VARIANT& FileType)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName, &FileType);
}

void CRichtext::SaveFile(LPCTSTR FileName, const VARIANT& FileType)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName, &FileType);
}

void CRichtext::SelPrint(long hDC)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hDC);
}

void CRichtext::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
